function [pc, ee] = expefficiency(opts)
% expefficiency  - experimental efficiency estimation
%
% FORMAT:       [pc, ee] = expefficiency(opts)
%
% Input fields:
%
%       opts        options for experiment
%        .actbase   active baseline condition spec (default: none)
%         .dur      duration for one "pass" of active baseline
%         .jit      jitter ISIs (default: false)
%         .name     name (default: 'active baseline')
%         .nump     number of baseline periods
%         .numt     number of baseline trials per period
%         .tdur     trial duration (default: 1)
%        .conds     1xC condition specification
%         .name     condition name (default: condition %d)
%         .next     1xC transition proportions (sum up to 1)
%         .num      number of trials (for this condition)
%         .stims    1xS stimulus specification
%          .dur     duration (either 1x1 fixed duration or options)
%           .dist   distribution, one of {'exp'}, 'gauss', 'uni'
%           .mean   mean duration
%           .range  min and max range to draw from
%          .model   enter this stim (trial phase) into PRT (default: true)
%          .name    stim name (default: stim %d)
%        .firstons  first onset (default: 8)
%        .tr        TR used for convolution/estimation (default: 2)
%        .ttime     total (run) time (default: auto + firstons)
%
% Output fields:
%
%       pc          PRT content (not object)
%       ee          efficiency estimates
%
% Example:
%
% s = struct( ...
%     'dur', ...
%         {2, ...
%          struct('dist', 'exp', 'mean', 0.7, 'range', [0.5, 2]), ...
%          6, ...
%          struct('dist', 'exp', 'mean', 2.5, 'range', [1.5, 5]), ...
%          3, ...
%          struct('dist', 'exp', 'mean', 3.5, 'range', [  2, 10])}, ...
%     'model', ...
%         {true, false, true, false, true, false}, ...
%     'name', ...
%         {'cue', 'isi1', 'stim', 'isi2', 'rating', 'iti'});
% c = struct( ...
%     'name', {'lookneu', 'lookneg', 'reappneg'}, ...
%     'next', {[0.2, 0.4, 0.4], [0.4, 0.2, 0.4], [0.4, 0.4, 0.2]}, ...
%     'num',  {18, 18, 18}, ...
%     'stims', {s, s, s});
% [pc, ee] = expefficiency(struct('conds', c, 'tr', 0.95));

% argument check
if nargin ~= 1 || ...
   ~isstruct(opts) || ...
    numel(opts) ~= 1 || ...
   ~isfield(opts, 'conds') || ...
   ~isstruct(opts.conds) || ...
   ~isfield(opts.conds, 'num')
    error( ...
        'neuroelf:BadArgument', ...
        'Bad input argument.' ...
    );
end
if ~isfield(opts, 'firstons') || ...
   ~isa(opts.firstons, 'double') || ...
    numel(opts.firstons) ~= 1 || ...
    isinf(opts.firstons) || ...
    isnan(opts.firstons) || ...
    opts.firstons < 0
    opts.firstons = 8;
end
%