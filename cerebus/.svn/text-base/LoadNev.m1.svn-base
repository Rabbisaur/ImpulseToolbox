function LoadNev(nevpath, elec, savwav,triggerNum)
%
% Use: LoadNev(nevpath, elec, savwav,triggerNum)
% nevpath - full or relative path to nev file
% elec - which electrode data you want to extract from nev file
% savewav - 0 or 1, if extract and save waveform information
% triggerNum - to which trigger all event aligned. default = 1st.
%
% This function load nev file generated by cerebus system and extract trial sorted spike
% time. Electrode sorted waveforms and save into elec.mat, NevBasic.mat, NevExtended.mat, Spike.mat and
% Elec#Waveform.mat. It also generate experiment events matrix and stores in
% Expmark.mat. Mbm file is not required but it will be more prone to error
% if without.
%
% created: 2011.12.25, wang Feng @bnu
% revised: 2012.11.12, Wang Feng @bnu
%

%% verify the validity of input arguments
switch nargin
    case 1
        fprintf('failure: electorde numbers must be stated explicitly.\n'); return;
    case 2
        savwav = 0;triggerNum = 1;
    case 3
        triggerNum = 1;
    case 4
        %temporarilly doing nothing
    otherwise
        fprintf('failure: load_nev accepts 4 input arguments.\n'); return;
end
%% check the validity of the nev & mbm files specified
if strcmp(nevpath(end-3:end), '.nev')
    if exist(nevpath,'file') == 2
%         fprintf('nev file found ...\n');
        % create folders for storing mat files
        matdir = nevpath(1: end-4);
        if exist(matdir,'dir') == 7
            rmdir(matdir,'s');
        end
        if mkdir(matdir)
%             fprintf('%s created\n',matdir)
        else
            error('matlab:mkdirfailed','failed to make directory for the mat file')
        end
        fileattrib(matdir, '+w');
        % check mbm file
        mbmpath = [nevpath(1: end-3) 'mbm'];
        if exist(mbmpath,'file') == 2
%             fprintf('mbm file found ...\n');
            [MbmNumtrials, ~, ~, sMbmInfo] = LoadMbm(mbmpath);
            withmbm = 1;
        else
            fprintf('mbm file not exist! Will process without validation!\n');
            withmbm = 0;
            MbmNumtrials = 100000;
        end
    else
        error('matlab:filenotexist','nev file not exist');
    end
else
    error('matlab:filenameerror','the nevpath must end with .nev');
end
% disp('the file path is valid, starting to process data ...');
%% process the header information
fprintf('\n\n\nWorking on file:\n%s\n',nevpath);
fprintf('Starting to process header info ...');
NevBasic = LoadNevheader(nevpath,matdir);
fprintf('the nev file was created on %d/%d/%d %d:%d:%d\n', ...
    NevBasic.timeorigin(2),NevBasic.timeorigin(4),NevBasic.timeorigin(1),NevBasic.timeorigin(5),NevBasic.timeorigin(6),NevBasic.timeorigin(7));
ZeroStartPoz = NevBasic.headerbytes;
%% load Nev data packets
% load all time stamps
RawTimeStamp = LoadData(nevpath,ZeroStartPoz,100,'uint32=>uint32');
% load all packets IDs
RawPacketID = LoadData(nevpath,ZeroStartPoz+4,103,'uint8=>uint8');
% load all Digital Input
DigiLow = LoadData(nevpath,ZeroStartPoz+9,103,'uint8=>uint8');
DigiHi = LoadData(nevpath,ZeroStartPoz+8,103,'uint8=>uint8');
%% generate ExpEvent matrix
poz = RawPacketID == 0;
DigiTimeStamp = RawTimeStamp(poz);
DigiLow = DigiLow(poz);
DigiHi = DigiHi(poz);
poz = RawPacketID == 129;
VsgTimeStamp = RawTimeStamp(poz);
Expmark = GetExpEvt(DigiTimeStamp,DigiLow,DigiHi,VsgTimeStamp);
%% Check the validity of the ExpEvent matrix if MBM presented
if withmbm ==1
    ChkExpevt(Expmark,MbmNumtrials,sMbmInfo);
end
%% Sort and Output
% Sort electrode data
for i = 1:numel(elec)
    fprintf('.')
    poz = RawPacketID == elec(i);
    if sum(poz) == 0
%         fprintf('Elec channel # %d contained no data, skip!\n',elec(i));
        elec(i) = -1;
    end
end
elec(elec == -1) = [];
Stamp = cell(numel(elec),1);
for i = 1:numel(elec)
    poz = RawPacketID == elec(i);
    Stamp{i} = RawTimeStamp(poz);
end
% Sort each electrode data into trials
Spike = cell(96,1);
temp = cell(numel(elec),1);
for i = 1:numel(elec)
    temp{i} = SortTrialSpike(Stamp{i},Expmark,triggerNum);
end
for i = 1:numel(elec)
    Spike{elec(i)} = temp{i};
end
save([nevpath(1:end-4) '/' 'elec.mat'],'elec');
save([nevpath(1:end-4) '/' 'Spike.mat'],'Spike');
save([nevpath(1:end-4) '/' 'Expmark.mat'],'Expmark');
clearvars -except savwav nevpath elec ZeroStartPoz
%% Save waveform when required
if savwav == 1
    SortWave(nevpath,elec,ZeroStartPoz)
end
%% finish up
TempDir = [nevpath(1:end-4) '/' 'temp'];
if exist(TempDir,'dir') == 7
    rmdir(TempDir,'s');
end
fprintf('\n')
fprintf('All done!\n')
function NevBasic = LoadNevheader(nevpath,matdir)
% record the header basic info
nevid = fopen(nevpath,'r');
NevBasic.type = sprintf('%s',fread(nevid,8,'*uchar'));
NevBasic.spec = fread(nevid,1,'*uint16');
if NevBasic.spec ~= hex2dec('0202')
    error('matlab:unsupportedfileversion','this version of load_nev.m is specialized for nev specification 2.2');
end
NevBasic.addflags = fread(nevid,16,'*ubit1');
NevBasic.headerbytes = fread(nevid,1,'*uint32');
NevBasic.dpbytes = fread(nevid,1,'*uint32');
NevBasic.tsresolution = fread(nevid,1,'*uint32');
NevBasic.sampleresolution = fread(nevid,1,'*uint32');
NevBasic.timeorigin = fread(nevid,8,'*uint16');
NevBasic.createapp = sprintf('%s',fread(nevid, 32, '*uchar'));
NevBasic.comment = sprintf('%s',fread(nevid, 256, '*uchar'));
NevBasic.numext = fread(nevid, 1, '*uint32');
% record the header extended info
NevExtended = fread(nevid,[32,NevBasic.numext],'*uint8');
filename = [matdir '/' 'nevbasic.mat'];
save(filename,'NevBasic');
filename = [matdir '/' 'nevextend.mat'];
save(filename,'NevExtended');
currposition = ftell(nevid);
if currposition == NevBasic.headerbytes
    fprintf('Done!\n');
else
    fprintf('Warning: The current file position(%d) doesn''t agree with indicated position from the header(%d).\n',currposition,NevBasic.HeaderBytes);
    fprintf('This may be safely ignored, by setting the zero-index to the first data packet according to the header infomation.\n');
    fprintf('However getting this warning may indicate corruption of the nev file or bug in the reader program.\n');
end
fclose(nevid);
return
function data=LoadData(nevpath,ZeroStartPoz,skip,datatype)
% open nev file
nevid = fopen(nevpath,'r');
fseek(nevid,ZeroStartPoz,-1);
data = fread(nevid,datatype,skip);
fclose(nevid);
return
function Expmark = GetExpEvt(DigiStamp,DigiLow,DigiHi,VsgStamp)
%
% Construct the experiment event data
%
% get trial onset stamps
OnsetStamp = DigiStamp(DigiHi == 4);
PauseOnStamp = DigiStamp(DigiHi == 3);
% get conditions
poz = DigiHi == 255 |DigiHi == 254 |DigiHi == 253;
CondidStp = DigiStamp(poz);
CondId = mod(255-uint16(DigiHi(poz)),255) * 256 + uint16(DigiLow(poz));
AbortStp = DigiStamp(DigiHi == 5);
NumTrials = numel(OnsetStamp);
% construct the experiment event matrix
fprintf('Constructing the experiment event matrix...');
Expmark = uint32(zeros(100,NumTrials));
Edges = [OnsetStamp;intmax('uint32')];
% Row 4 process pause on, must be unique
% Edges = [0;Edges];
temp = histc(PauseOnStamp,Edges);
temp = temp(1:end-1);
poz = find(temp > 0);
if PauseOnStamp(1) < OnsetStamp(1)
    PauseOnStamp(1)=[];
end
if length(poz)>length(Expmark)
    fprintf('Total pause on(%d) exceeded number of trials(%d)!\n',length(poz),length(Expmark));
    if matlabpool('size') == 0
        %input('Acknowledged!')
    end
end
if max(poz)>length(PauseOnStamp)
    fprintf('Max pause on position(%d) is greater than actual length of pause on(%d)!\n',max(poz),length(PauseOnStamp))
    if matlabpool('size') == 0
        %input('Acknowledged!')
    end
end
Expmark(4,:) = PauseOnStamp(poz);
% new edges should be from first pause off to the last pause on
Edges = [OnsetStamp;Expmark(4,end)];
% Row 2 process condition id, must be unique
temp = histc(CondidStp,Edges);
temp = temp(1:end-1);
poz = find(temp > 0);
Expmark(2,poz) = CondId(1:numel(poz));
% Row 3 prcess aborted trials, one or none
temp = histc(AbortStp,Edges);
temp = temp(1:end-1);
poz = find(temp > 0);
Expmark(3,poz) = AbortStp(1:numel(poz));
% Row 5 and +, process Vsg trigger
temp = histc(VsgStamp,Edges);


if temp(end) == 0
    temp = temp(1:end-1);
end

VsgStamp = mat2cell(VsgStamp,temp,1);

for i = 1:size(VsgStamp,1);
    NumTriggers = numel(VsgStamp{i});
    Expmark(5:4+NumTriggers,i) = VsgStamp{i};
end
Expmark(1,:) = OnsetStamp;
fprintf('Done!\n');
return
function ChkExpevt(Expmark,MbmNumtrials,sMbmInfo)
fprintf('Validating experiment event data...')
NevNumtrials = size(Expmark,2);
if NevNumtrials ~= MbmNumtrials
    fprintf('\nTrial number in the mbm(%d) and nev(%d) doesn''t match.\n',MbmNumtrials,NevNumtrials);
    if matlabpool('size') == 0
        %input('Acknowledged!')
    end
    %error('Number of trials mismatch!');
else
    condcmp = uint16(sMbmInfo.stimID) - uint16(Expmark(2,:));
    unmatch = find(condcmp);
    if ~isempty(unmatch)
        fprintf('\nCondition ID in the mbm and nev mismatch in %d trial(s).\n',numel(unmatch));
    end
end
fprintf('PASS!\n');
return
function Spike = SortTrialSpike(RawStamp,Expmark,triggerNum)
% add last pause on to the end of Expmark(1,:)
TrialSep = [Expmark(1,:) Expmark(4,end)];
% Spikes before first pauseoff should be abandoned
RawStamp(RawStamp < Expmark(1,1)) = [];
% Spikes after last pauseon should be abandoned
RawStamp(RawStamp >= Expmark(4,end)) = [];
% count the number of spikes in each trial
TrialSpkCount = histc(RawStamp,TrialSep);
TrialSpkCount = TrialSpkCount(1:end-1);
% cut RawStamp and RawUnit into cells of trials
if length(RawStamp) ~= sum(TrialSpkCount)
    fprintf('Number of spikes in RawStamp does not agree with sum of number of spikes per trial!\n');
    if matlabpool('size') == 0
        %input('Acknowledged!')
    end
end
Spike = mat2cell(RawStamp',1,TrialSpkCount);
% Align to VSG trigger
for i = 1:size(Spike,2)
    Spike{i} = int32(int64(Spike{i}) - int64(Expmark(4+triggerNum,i)));
end
return
function SortWave(nevpath,elec,zeroposition)
matdir = nevpath(1:end-4);
nevid=fopen(nevpath);
fseek(nevid,0,1);
nevsize = uint64(ftell(nevid));
fseek(nevid,zeroposition,-1);
% get memory info
[~,systemview] = GetMemory;
memsize = uint64(systemview.PhysicalMemory.Available);
% set cache size
filecachesize = memsize / 3;
if filecachesize > nevsize
    diskcacheflag = 0;
    fprintf('\nAvailable physical memory size greater than NEV file size\n')
    fprintf('Use RAM cache...\n')
else
    fprintf('\nAvailable physical memory size less than NEV file size\n')
    fprintf('Use disk cache...\n')
    diskcacheflag = 1;
    % prepare directory to store temp files
    fprintf('Preparing cache directory...');
    cachedir = [nevpath(1: end-4) '/temp'];
    mkdir(cachedir);
    if ~isempty(elec)
        for i = 1 : numel(elec)
            cachedir = [nevpath(1: end-4) '/temp/' num2str(elec(i))];
            mkdir(cachedir);
        end
    end
    fprintf('Done!\n');
end
if diskcacheflag
    NumSplit = 0;
    while uint64(ftell(nevid)) < nevsize
        NumSplit = NumSplit + 1;
        % load a portion of nev file into memory
        cache = fread(nevid,[104,filecachesize/104],'104*uint8=>uint8');
        fprintf('\t%d/%d\n',uint64(ftell(nevid)),nevsize);
        % save data into mem cache
        % elec ID cache
        idcache = cache(5,:);
        % wave cache
        wavecache = cache(9:104,:);
        clearvars cache;
        % sort elec and save to disk cache
        for i = 1:numel(elec)
            % sort wave cache
            cachedir = [nevpath(1: end-4) '/temp/' num2str(elec(i))];
            poz = idcache == elec(i);
            rawwave = wavecache(:,poz);
            filepath = [cachedir '/' 'rawwave.' num2str(NumSplit)];
            cacheID = fopen(filepath,'w');
            fwrite(cacheID,rawwave);
            fclose(cacheID);
        end
        
    end
    % load diskcache back and store in mat
    for i = 1:numel(elec)
        % get file size
        filesize = zeros(1,1,'uint64');
        for j = 1:NumSplit
            cachedir = [nevpath(1: end-4) '/temp/' num2str(elec(i))];
            filename = [cachedir '/' 'rawwave.' num2str(j)];
            cacheID = fopen(filename);
            fseek(cacheID,0,1);
            cachefilesize = ftell(cacheID);
            filesize = filesize + cachefilesize;
        end
        eoc = ones(1,1,'uint64');
        WaveCache = ones(48,filesize/2/48,'int16');
        for j = 1:NumSplit
            % load wave form disk cache into mem cache
            cachedir = [nevpath(1: end-4) '/temp/' num2str(elec(i))];
            filename = [cachedir '/' 'rawwave.' num2str(j)];
            cacheID = fopen(filename);
            Temp = fread(cacheID,[48,inf],'48*int16=>int16');
            fclose(cacheID);
            TempSize = size(Temp,2);
            WaveCache(:,eoc:eoc+TempSize-1) = Temp;
            eoc = eoc + TempSize;
        end
        % cut wave cache into RawWave
        % process into rawstamp and rawunit
        ElecWaveform = WaveCache(:,1:eoc-1);
        % save to mat file
        filepath = [matdir '/' 'Elec' num2str(elec(i)) 'Waveform.mat'];
        save(filepath,'ElecWaveform');
    end
else
    % save data into mem cache
    % elec ID cache
    fseek(nevid,zeroposition+4,-1);
    idcache = fread(nevid,'uint8=>uint8',103);
    % wave cache
    fseek(nevid,zeroposition+8,-1);
    wavecache = fread(nevid,'48*int16=>int16',8);
    wavecache = reshape(wavecache,48,[]);
    for i = 1:numel(elec)
        poz = idcache == elec(i);
        ElecWaveform = wavecache(:,poz);
        % save to mat file
        filepath = [matdir '/' 'Elec' num2str(elec(i)) 'Waveform.mat'];
        save(filepath,'ElecWaveform');
    end
end
% load Waveform back and save to a single matfile
Waveform = cell(96,1);
for i = 1:numel(elec)
    filepath = [matdir '/' 'Elec' num2str(elec(i)) 'Waveform.mat'];
    load(filepath);
    Waveform{elec(i)} = ElecWaveform;
end
filepath = [matdir '/' 'Waveform.mat'];
save(filepath,'Waveform');
delete([matdir '/' 'Elec*Waveform.mat']);
return