function LoadNev(filepath, elec, savwav,triggerNum)
% load BIG nev file and save mat containing spike time, basic and extended
% header as well as wave forms to local disk. warning! will overwrite older
% mat files.
% usage: load_nev(nevpath, elec, savwav)
% files saved in the disk:
%     nevbasic - strcture array, header basic info
%     nevextend - cell, header extended info for user-specified elec
%     elec*spk - spike times in each channel sorted to conditions and
%                aligned to vsg trigger
%     elec*unit - corresponding rawunit in each channel sorted and aligned
%                 in the same way
%     elec*wav - 48 points spike wav in each channel also sorted and
%                aligned in the same way
% inputs
%       nevpath - string indicated path in the local disk
%       elec - which channel to analyze? default: process all channels
%       savwav - save spike wav?
% history
%       created: 2011.12.25, wang f@bnu
%
%% configure
matversion = '-v7';
%% verify the validity of input arguments
switch nargin
    case 1
        fprintf('failure: electorde numbers must be stated explicitly.\n'); return;
    case 2
        savwav = 0;
%     case 3
%         fprintf('If no standard selected, Spike Time would be stored in uint32 machine time by default!\n');
%         fprintf('And the experiment events monitor file would be stored in matrix!\n');
    case 3
        triggerNum = 1;
    case 4
        %temporarilly doing nothing
    otherwise
        fprintf('failure: load_nev accepts 4 input arguments.\n'); return;
end
NumFiles = numel(filepath);
switch NumFiles
    case 1
        nevpath = filepath{1};
        mbmpath = filepath{1};
    case 2
        nevpath = filepath{1};
        mbmpath = filepath{2};
    otherwise
        fprintf('failure: filepath{1} = nevpath; filepath{2} = mbmpath; no third file path accepted!\n');return;
end
%% check the validity of the nev & mbm files specified
if strcmp(nevpath(end-3:end), '.nev')
    if exist(nevpath,'file') == 2
        fprintf('nev file found ...\n');
        % create folders for storing mat files
        matdir = nevpath(1: end-4);
        if exist(matdir,'dir') == 7
            rmdir(matdir,'s');
        end
        if mkdir(matdir)
            fprintf('%s created\n',matdir)
        else
            error('matlab:mkdirfailed','failed to make directory for the mat file')
        end
        fileattrib(matdir, '+w');
        % check mbm file
        mbmpath = [mbmpath(1: end-3) 'mbm'];
        if exist(mbmpath,'file') == 2
            fprintf('mbm file found ...\n');
            [MbmNumtrials, MbmInfo] = LoadMbm(filepath,matversion);
            withmbm = 1;
        else
            fprintf('mbm file not exist! Will process without validation!\n');
            withmbm = 0;
            MbmNumtrials = 100000;
        end
    else
        error('matlab:filenotexist','nev file not exist');
    end
else
    error('matlab:filenameerror','the nevpath must end with .nev');
end
disp('the file path is valid, starting to process data ...');
%% take the advantage of multicore computing
% % % if matlabpool('size') == 0 && numel(elec) >= 4
% % %     matlabpool('open','local');
% % % end
% % % if matlabpool('size') > 0 && numel(elec) == 1
% % %     matlabpool close;
% % % end
NumCores = matlabpool('size');
% Zero cores doen't make sense
if NumCores == 0
    NumCores = 1;
    fprintf('Using ONLY 1 cpu core, use matlabpool to accelerate\nthis program on a multicore system.');
end
%% process the header information
NevBasic = LoadNevheader(nevpath,matdir,matversion);
%% load NEV file and save sorted result into disk cache
NumSplit = NevDiskcache(nevpath,elec,savwav,NevBasic,NumCores);
%% generate ExpEvent matrix
Expmark = GetExpEvt(nevpath,MbmNumtrials,NumSplit,matversion);
%% Check the validity of the ExpEvent matrix if MBM presented
if withmbm ==1
    ChkExpevt(Expmark,MbmNumtrials,MbmInfo);
end
%% load each electrode back into memory and sort into trials
parfor i = 1 : numel(elec)
    elecID = elec(i);
    elec(i) = SortTrialSpike(nevpath,elecID,NumSplit,Expmark,savwav,matversion,standard,triggerNum);
end
save([nevpath(1:end-4) '/' 'elec.mat'],'elec',matversion);
%% If MG Standard Required, reshape the Expmark and Mbminfo into ExpMonitor
if strcmpi(standard,'mg')
    GenExpMonitor(nevpath,withmbm,matversion);
end
%% finish up
TempDir = [nevpath(1:end-4) '/' 'temp'];
if exist(TempDir,'dir') == 7
    rmdir(TempDir,'s');
end
% % % if matlabpool('size') > 0
% % %     matlabpool close;
% % % end
fprintf('All done!\n')
function NevBasic = LoadNevheader(nevpath,matdir,matversion)
% record the header basic info
nevid = fopen(nevpath,'r');
NevBasic.type = sprintf('%s',fread(nevid,8,'*uchar'));
if strcmp(NevBasic.type,'NEURALEV')
    fprintf('Starting to process basic header info ...');
else
    fprintf('%s',NevBasic.type)
    error('matlab:invalidfile','the nev file is invalid!');
end
NevBasic.spec = fread(nevid,1,'*uint16');
if NevBasic.spec ~= hex2dec('0202')
%     error('matlab:unsupportedfileversion','this version of load_nev.m is specialized for nev specification 2.2');
end
NevBasic.addflags = fread(nevid,16,'*ubit1');
NevBasic.headerbytes = fread(nevid,1,'*uint32');
NevBasic.dpbytes = fread(nevid,1,'*uint32');
NevBasic.tsresolution = fread(nevid,1,'*uint32');
NevBasic.sampleresolution = fread(nevid,1,'*uint32');
NevBasic.timeorigin = fread(nevid,8,'*uint16');
NevBasic.createapp = sprintf('%s',fread(nevid, 32, '*uchar'));
NevBasic.comment = sprintf('%s',fread(nevid, 256, '*uchar'));
NevBasic.numext = fread(nevid, 1, '*uint32');
fprintf('Done!\n');
fprintf('the nev file was created on %d/%d/%d %d:%d:%d\n',NevBasic.timeorigin(2),NevBasic.timeorigin(4),NevBasic.timeorigin(1),NevBasic.timeorigin(5),NevBasic.timeorigin(6),NevBasic.timeorigin(7));
% record the header extended info
fprintf('Starting to process extended header info ...');
NevExtended = fread(nevid,[32,NevBasic.numext],'*uint8');
filename = [matdir '/' 'nevbasic.mat'];
save(filename,'NevBasic',matversion);
filename = [matdir '/' 'nevextend.mat'];
save(filename,'NevExtended',matversion);
currposition = ftell(nevid);
if currposition == NevBasic.headerbytes
    fprintf('Done!\n');
else
    fprintf('Warning: The current file position(%d) doesn''t agree with indicated position from the header(%d).\n',currposition,NevBasic.HeaderBytes);
    fprintf('This may be safely ignored, by setting the zero-index to the first data packet according to the header infomation.\n');
    fprintf('However getting this warning may indicate corruption of the nev file or bug in the reader program.\n');
end
fclose(nevid);
return;
function Expmark = GetExpEvt(nevpath,MbmNumtrials,numsplit,matversion)
%
%process experiment event data
%
fprintf('Processing experiment events...\n');
% initiate memory cache
stampcache = zeros(MbmNumtrials*10,1,'uint32');
digivalcache = zeros(2,MbmNumtrials*10,'uint8');
vsgstampcache = zeros(MbmNumtrials,1,'uint32');
eoc = ones(2,1,'uint32');
% load event data back into memory
cachedir = [nevpath(1: end-4) '/temp/0'];
for i = 1: numsplit
    % load digi stamps
    filepath = [cachedir '/' 'digistamp.' num2str(i)];
    fid = fopen(filepath,'r');
    temp = fread(fid,'uint32=>uint32');
    fclose(fid);
    TempLength = size(temp,1);
    stampcache(eoc(1):eoc(1)+TempLength-1)=temp;
    % load digi val
    filepath = [cachedir '/' 'digival.' num2str(i)];
    fid = fopen(filepath,'r');
    temp = fread(fid,[2,inf],'2*uint8=>uint8');
    fclose(fid);
    TempLength = size(temp,2);
    digivalcache(:,eoc(1):eoc(1)+TempLength-1) = temp;
    eoc(1) = eoc(1) + TempLength - 1;
    % load vsgstamp
    filepath = [cachedir '/' 'vsgstamp.' num2str(i)];
    fid = fopen(filepath,'r');
    temp = fread(fid,'uint32=>uint32');
    fclose(fid);
    TempLength = size(temp,1);
    vsgstampcache(eoc(2):eoc(2)+TempLength-1)=temp;
    eoc(2) = eoc(2) + TempLength - 1;
end
% reconstruct experiment event data
DigiStamp = stampcache(1:eoc(1));
DigiHi = digivalcache(1,1:eoc(1));
DigiLow = digivalcache(2,1:eoc(1));
VsgStamp = vsgstampcache(1:eoc(2));
%
% Construct the experiment event data
%
% get trial onset stamps
OnsetStamp = DigiStamp(DigiHi == 4);
PauseOnStamp = DigiStamp(DigiHi == 3);
% get conditions
poz = DigiHi == 255 |DigiHi == 254 |DigiHi == 253;
CondidStp = DigiStamp(poz);
CondId = mod(255-uint16(DigiHi(poz)),255) * 256 + uint16(DigiLow(poz));
AbortStp = DigiStamp(DigiHi == 5);
NumTrials = numel(OnsetStamp);
% construct the experiment event matrix
fprintf('Constructing the experiment event matrix...');
Expmark = uint32(zeros(10000,NumTrials));
Edges = [OnsetStamp;intmax('uint32')];
% Row 2 process condition id, must be unique
temp = histc(CondidStp,Edges);
temp = temp(1:end-1);
poz = find(temp > 0);
Expmark(2,poz) = CondId(1:numel(poz));
% Row 3 prcess aborted trials, one or none
temp = histc(AbortStp,Edges);
temp = temp(1:end-1);
poz = find(temp > 0);
Expmark(3,poz) = AbortStp(1:numel(poz));
% Row 4 process pause on, must be unique
Edges = [0;Edges];
temp = histc(PauseOnStamp,Edges);
temp = temp(1:end-1);
poz = find(temp > 0);
if temp(1) > 0
    poz = poz(2:end);
end
Expmark(4,:) = PauseOnStamp(poz);
% Row 5 and +, process Vsg trigger
temp = histc(VsgStamp,Edges);
temp = temp(1:end-1);
VsgStamp = mat2cell(VsgStamp,temp,1);
for i = 2:size(VsgStamp,1);
    NumTriggers = numel(VsgStamp{i}); 
    Expmark(5:4+NumTriggers,i-1) = VsgStamp{i};
end
% % % %     process aborted trials
% % % for i = 1 : numel(AbortStp)
% % %     poz = find((OnsetStamp < AbortStp(end - (i-1))), 1,'last');
% % %     Expmark(3,poz) = AbortStp(end-(i-1));
% % % end
% % % %     process condition id
% % % for i = 1 : numel(CondidStp)
% % %     poz = find((OnsetStamp < CondidStp(end - (i-1))), 1,'last');
% % %     Expmark(2,poz) = CondId(end - (i-1));
% % % end
% % % %     process pause on
% % % for i = 1 : numel(PauseOnStamp)
% % %     poz = find((OnsetStamp < PauseOnStamp(end - (i-1))), 1,'last');
% % %     Expmark(4,poz) = PauseOnStamp(end - (i-1));
% % % end
% % % %     process tigger can have up to 10 triggers
% % % for i = 1 : numel(VsgStamp)
% % %     poz = find(OnsetStamp < VsgStamp(i), 1,'last');
% % %     k = 5;
% % %     while Expmark(k,poz) ~= 0
% % %         k = k + 1;
% % %     end
% % %     Expmark(k,poz) = VsgStamp(i);
% % % end
Expmark(1,:) = OnsetStamp;
matdir = nevpath(1:end-4);
filename = [matdir '/' 'Expmark.mat'];
save(filename,'Expmark',matversion);
fprintf('Done!\n');
return;
function GenExpMonitor(nevpath,withmbm,matversion)
MatPath = nevpath(1:end-4);
FilePath = [MatPath '/' 'Expmark.mat'];
load(FilePath);
% ExpMonitor = struct('StartT',{},'StimCnd',{},'TTLT',{},'AbortT',{},'EndT',{}, ...
%     'StimID',{},'RespCode',{},'TaskOnRf',{},'TaskCnd',{},'PreT',{},'TrigT',{},'StimT',{},'RespT',{});

ExpMonitor.StartT = Expmark(1,:);
ExpMonitor.StimCnd = Expmark(2,:);
ExpMonitor.TTLT = Expmark(5:end,:);
ExpMonitor.AbortT = Expmark(3,:);
ExpMonitor.EndT = Expmark(4,:);
if withmbm
    FilePath = [MatPath '/' 'mbminfo.mat'];
    load(FilePath);
    ExpMonitor.StimID = MbmInfo(1,:);
    ExpMonitor.RespCode = MbmInfo(2,:);
    ExpMonitor.TaskOnRF = MbmInfo(3,:);
    ExpMonitor.TaskCnd = MbmInfo(4,:);
    ExpMonitor.PreT = MbmInfo(5,:);
    ExpMonitor.TrigT = MbmInfo(6,:);
    ExpMonitor.StimT = MbmInfo(7,:);
    ExpMonitor.RespT = MbmInfo(8,:);
end
FilePath = [MatPath '/' 'ExpMonitor.mat'];
save(FilePath,'ExpMonitor',matversion);
function ChkExpevt(Expmark,MbmNumtrials,MbmInfo)
fprintf('Validating experiment event data...')
NevNumtrials = size(Expmark,2);
if NevNumtrials ~= MbmNumtrials
    fprintf('\nTrial number in the mbm(%d) and nev(%d) doesn''t match.\n',MbmNumtrials,NevNumtrials);
    error('Number of trials mismatch!');
else
    condcmp = uint16(MbmInfo(4,:)) - uint16(Expmark(2,:));
    unmatch = find(condcmp);
    if ~isempty(unmatch)
        fprintf('\nCondition ID in the mbm and nev mismatch in %d trial(s).\n',numel(unmatch));
        %     fprintf('ABORT!\n');
        %     error('Condition IDs mismatch!');
    end
end
fprintf('PASS!\n');
return;
function status = SortTrialSpike(nevpath,elecID,NumSplit,Expmark,savwav,matversion,standard,triggerNum)
status = 0;
% load disk cache into mem cache
fprintf('Loading elec %d ... ',elecID);
% initiate mem cache
spkcachesize = uint64(50000000);
wavecachesize = uint64(300000000);
% reset values
eoc = ones(2,1,'uint64');
% relocate stpcache unit id cache size
stpcache = ones(1,spkcachesize/6,'uint32');
unitcache = ones(1,spkcachesize/6,'uint8');
% set path
TempPath = [nevpath(1:end-4) '/' 'temp'];
CachePath = [TempPath '/' num2str(elecID)];
for i = 1:NumSplit
    % load spike time stamp disk cache into mem cache
    filename = [CachePath '/' 'rawstamp.' num2str(i)];
    cacheID = fopen(filename);
    Temp = fread(cacheID,'uint32=>uint32');
    fclose(cacheID);
    TempSize = size(Temp,1);
    if TempSize == 0
        fprintf('Elec %d contains no data, skip!\n',elecID);
        return;
    end
    stpcache(1,eoc(1):eoc(1)+TempSize-1) = Temp;
    eoc(1) = eoc(1) + TempSize;
    clear Temp;
    % load unit disk cache into mem cache
    filename = [CachePath '/' 'rawunit.' num2str(i)];
    cacheID = fopen(filename);
    Temp = fread(cacheID, 'uint8=>uint8');
    fclose(cacheID);
    TempSize = size(Temp,1);
    unitcache(1,eoc(2):eoc(2)+TempSize-1) = Temp;
    eoc(2) = eoc(2) + TempSize;
    clear Temp cacheID TempSize;
end
% check consistency of disk cache
if eoc(1) ~= eoc(2)
    error('MATLAB:FILESYSTEMERR','The size of time stamp disk cache inconsistent with the size of unit disk cache!');
end
% process into rawstamp and rawunit
poz = find(stpcache >= Expmark(1,1),1,'first');
RawStamp = stpcache(1,poz:eoc(1)-1);
RawUnit = unitcache(1,poz:eoc(2)-1);
clear stpcache unitcache eoc;
fprintf('Done! ')
% sort spike time stamp and unit into each trials
fprintf('Sorting elec %d into trials ... ', elecID);
% add 2^32 - 1 to the end of Expmark(1,:)
TrialSep = [Expmark(1,:) 2^32-1];
% count the number of spikes in each trial
TrialSpkCount = histc(RawStamp,TrialSep);
TrialSpkCount = TrialSpkCount(1:end-1);
% cut RawStamp and RawUnit into cells of trials
Spike = mat2cell(RawStamp,1,TrialSpkCount);
Unit = mat2cell(RawUnit,1,TrialSpkCount);
% Align to VSG trigger
for i = 1:size(Spike,2)
    Spike{i} = int32(int64(Spike{i}) - int64(Expmark(4+triggerNum,i)));
end
% if save as standard established by Chen MG @ BNU, then the Spike time
% must be converted from machine time to seconds in single precision.
if strcmpi(standard,'mg')
    for i = 1:size(Spike,2)
        Spike{i} = single(double(Spike{i})./30./1000);
    end
end
% save to mat
matdir = nevpath(1: end-4);
filepath = [matdir '/' 'Elec' num2str(elecID) 'Spike.mat'];
save(filepath,'Spike',matversion);
filepath = [matdir '/' 'Elec' num2str(elecID) 'Unit.mat'];
save(filepath,'Unit',matversion);
clear SpikeTime Unit RawStamp RawUnit;
%% sort wave form into each trials
% load wave form disk cache into mem cache
if savwav == 1
    eoc = ones(1,'uint64');
    WaveCache = ones(48,wavecachesize/2/48,'int16');
    TempPath = [nevpath(1:end-4) '/' 'temp'];
    CachePath = [TempPath '/' num2str(elecID)];
    for i = 1:NumSplit
        % load wave form disk cache into mem cache
        filename = [CachePath '/' 'rawwave.' num2str(i)];
        cacheID = fopen(filename);
        Temp = fread(cacheID,[48,inf],'48*int16=>int16');
        fclose(cacheID);
        TempSize = size(Temp,2);
        WaveCache(:,eoc:eoc+TempSize-1) = Temp;
        eoc = eoc + TempSize;
        clear Temp cacheID TempSize;
    end
    % cut wave cache into RawWave
    % process into rawstamp and rawunit
    RawWave = WaveCache(:,poz:eoc-1);
    clear WaveCache poz eoc;
    % cut RawWave and RawUnit into cells of trials
    Waveform = mat2cell(RawWave,48,TrialSpkCount);
    % save to mat file
    filepath = [matdir '/' 'Elec' num2str(elecID) 'Waveform.mat'];
    save(filepath,'Waveform',matversion);
    clear RawWave Waveform;
end
fprintf('Done!\n')
status = elecID;
return;
function NumSplit = NevDiskcache(nevpath,elec,savwav,NevBasic,NumCores)
% verify the validity of input arguments
switch nargin
    case 5
        %temporarilly doing nothing
    otherwise
        fprintf('failure: NevloadDisk Only accepts 5 input arguments.\n'); return;
end
% prepare directory to store temp files
fprintf('Preparing cache directory...');
cachedir = [nevpath(1: end-4) '/temp'];
mkdir(cachedir);
cachedir = [nevpath(1: end-4) '/temp/0'];
mkdir(cachedir);
if ~isempty(elec)
    for i = 1 : numel(elec)
        cachedir = [nevpath(1: end-4) '/temp/' num2str(elec(i))];
        mkdir(cachedir);
    end
end
fprintf('Done!\n');
% Load NEV file, save sorted result into disk cache
% Load and split nev
fprintf('Loading data packets, please wait...\n');
% open nev file
nevid = fopen(nevpath,'r');
% get nev file size and # of datapackets
fseek(nevid,0,1);
nevsize = uint64(ftell(nevid));
% position the pointer to the 0 position to the first data packet
fseek(nevid,NevBasic.headerbytes,-1);
% load nev file
NumSplit = 0;
fprintf('\t%d/%d\n',uint64(ftell(nevid)),nevsize);
while uint64(ftell(nevid)) < nevsize
    NumSplit = NumSplit + 1;
    % get memory info
    [~,systemview] = GetMemory;
    memsize = uint64(systemview.PhysicalMemory.Available);
    % set cache size
    if savwav == 1
        filecachesize = memsize / NumCores / 3;
    elseif savwav == 0
        filecachesize = memsize / 2;
    end
    % load a portion of nev file into memory
    cache = fread(nevid,[104,filecachesize/104],'104*uint8=>uint8');
    fprintf('\t%d/%d\n',uint64(ftell(nevid)),nevsize);
    % save data into mem cache
    % stamp cache
    stampcache = cache(1:4,:);
    % unit cache
    unitcache = cache(7,:);
    % elec ID cache
    idcache = cache(5,:);
    % wave cache
    if savwav == 1
        wavecache = cache(9:104,:);
    elseif savwav == 0
        wavecache = 0;
    end
    % digital port value cache
    digicache = cache(9:10,:);
    clear cache;
    % save elec 0 and elec 129
    poz = idcache == 0;
    digistamp = stampcache(:,poz);
    digival = digicache(:,poz);
    poz = idcache == 129;
    vsgstamp = stampcache(:,poz);
    % write cache file - Digi stamp
    cachedir = [nevpath(1: end-4) '/temp/0'];
    filepath = [cachedir '/' 'digistamp.' num2str(NumSplit)];
    cacheID = fopen(filepath,'w');
    fwrite(cacheID,digistamp);
    fclose(cacheID);
    % write cache file - Digi value
    cachedir = [nevpath(1: end-4) '/temp/0'];
    filepath = [cachedir '/' 'digival.' num2str(NumSplit)];
    cacheID = fopen(filepath,'w');
    fwrite(cacheID,digival);
    fclose(cacheID);
    % write cache file - VSG trigger stamp
    cachedir = [nevpath(1: end-4) '/temp/0'];
    filepath = [cachedir '/' 'vsgstamp.' num2str(NumSplit)];
    cacheID = fopen(filepath,'w');
    fwrite(cacheID,vsgstamp);
    fclose(cacheID);
    clear digicache digistamp digival vsgstamp cacheID poz systemview;
    % sort nev data packet into electrode
    if ~isempty(elec)
        parfor i = 1 : numel(elec)
            ElecID = elec(i);
            SortElec(nevpath,ElecID,stampcache,unitcache,idcache,wavecache,savwav,NumSplit);
        end
    end
    % % %     clear  stampcache unitcache idcache
    clear cache;
end
% close nev file
fclose(nevid);
fprintf('Done!\n');
return;
function SortElec(nevpath,ElecID,stampcache,unitcache,idcache,wavecache,savwav,NumSplit)
% create cache dir
cachedir = [nevpath(1: end-4) '/temp/' num2str(ElecID)];
poz = idcache == ElecID;
% timestamp
rawstamp = stampcache(:,poz);
% unit
rawunit = unitcache(poz);
% save cache file - timestamp
filepath = [cachedir '/' 'rawstamp.' num2str(NumSplit)];
cacheID = fopen(filepath,'w');
fwrite(cacheID,rawstamp);
fclose(cacheID);
% save cache file - unit
filepath = [cachedir '/' 'rawunit.' num2str(NumSplit)];
cacheID = fopen(filepath,'w');
fwrite(cacheID,rawunit);
fclose(cacheID);
clear rawstamp rawunit;
if savwav == 1
    %%%%%%%%%%%%
    % wave form
    %%%%%%%%%%%%
    % save cache file - unit
    rawwave = wavecache(:,poz);
    filepath = [cachedir '/' 'rawwave.' num2str(NumSplit)];
    cacheID = fopen(filepath,'w');
    fwrite(cacheID,rawwave);
    fclose(cacheID);
    clear rawwave;
end
return;
function [MbmNumtrials, MbmInfo] = LoadMbm(filepath,matversion)
NumFiles = numel(filepath);
switch NumFiles
    case 1
        nevpath = filepath{1};
        mbmpath = filepath{1};
    case 2
        nevpath = filepath{1};
        mbmpath = filepath{2};
    otherwise
        fprintf('failure: filepath{1} = nevpath; filepath{2} = mbmpath; no third file path accepted!\n');return;
end
%% load mbm into memory
MatDir = nevpath(1:end-4);
if exist(MatDir,'dir')~=7
    mkdir(MatDir);
end
MbmPath = [mbmpath(1:end-3) 'mbm'];
mbmid = fopen(MbmPath,'r');
CurrLine = '';
while ~strcmp(CurrLine,'[DATA_BEGIN]')
    CurrLine = fgetl(mbmid);
end
MbmNumtrials=0;
while ischar(CurrLine);
    CurrLine = fgetl(mbmid); 
    MbmNumtrials=MbmNumtrials+1;
end
MbmNumtrials = MbmNumtrials - 1;
MbmInfo = zeros(8,MbmNumtrials);
frewind(mbmid);
while ~strcmp(CurrLine,'[DATA_BEGIN]')
    CurrLine = fgetl(mbmid);
end
for i = 1:MbmNumtrials
    CurrLine = fgetl(mbmid);
    temp = textscan(CurrLine,'%f',8);
% %     MbmInfo(1,i) = temp{1}(1);
% %     MbmInfo(2,i) = temp{1}(2);
% %     MbmInfo(3,i) = temp{1}(3);
% %     MbmInfo(4,i) = temp{1}(4);
% %     MbmInfo(5,i) = temp{1}(5);
% %     MbmInfo(6,i) = temp{1}(6);
% %     MbmInfo(7,i) = temp{1}(7);
% %     MbmInfo(8,i) = temp{1}(8);
    MbmInfo(1:numel(temp{1}),i) = temp{1};
end
fclose(mbmid);
FileName = [nevpath(1:end-4) '/' 'mbminfo.mat'];
save(FileName,'MbmInfo',matversion);
return;