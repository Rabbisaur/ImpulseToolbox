function CC = LoadNsx(NsxPath,savemat)
% help info to be added
%% check argument
switch nargin
    case 2
    otherwise
        disp('FAILURE: LoadNsx accepts 2 input arguments.');
        return;
end
% mat file version
matversion = '-v7';
%% check the validity of Nsxpath
for i = 1:9
    NsxPath = [NsxPath(1:end-4) '.ns' num2str(i)];
    if exist(NsxPath, 'file')==2
        break;
    end
    if i==9
        disp('FAILURE: NSx file does not exist.');
        return;
    end
end
fprintf('NSX file found, start processing...\n');
%% make directories to store data
path = NsxPath(1:end-4);
if  exist(path, 'dir') ~= 7
    fprintf('%s not found!\n', path);
    error('We must load NEV first.')
end
% % path = [NsxPath(1:end-4) '/' 'ContinuousData'];
% % if exist(path, 'dir') == 7
% %     rmdir(path,'s')
% % end
% % fprintf('Creating %s\n', path);
% % mkdir(path)
% % fprintf('Creating %s\n', [path '/' 'temp']);
% % mkdir([path '/' 'temp']);
%% process basic header
NsxID = fopen(NsxPath,'r');
fseek(NsxID, 0, 1);
NsxSize = uint64(ftell(NsxID));
fprintf('NSX file size is %dMB\n',NsxSize/1024^2)
frewind(NsxID);
NsxBasic.FileType = sprintf('%s', fread(NsxID, 8, '*char'));
% check file type ID
if ~strcmp(NsxBasic.FileType, 'NEURALCD')
    error('NSX FileType mismatch!')
end
VerNum = fread(NsxID, 2, 'uchar=>uchar');
NsxBasic.FileVersion = ['Spec. ' num2str(VerNum(1)) '.' num2str(VerNum(2))];
NsxBasic.HeaderSize = fread(NsxID, 1, 'uint32=>uint32');
NsxBasic.Label = sprintf('%s', fread(NsxID, 16, 'char=>uint32'));
% NsxBasic.Comment = sprintf('%s', fread(NsxID, 256, '*char'));
fseek(NsxID, 256, 0);
NsxBasic.Period = fread(NsxID, 1, 'uint32=>uint32');
NsxBasic.ClockFs = fread(NsxID, 1, 'uint32=>uint32');
NsxBasic.Fs = NsxBasic.ClockFs/NsxBasic.Period;
NsxBasic.TimeOrigin = fread(NsxID, [1 8], 'uint16=>uint16');
fprintf('NSX file created at %d:%d:%d %d-%d-%d\n',NsxBasic.TimeOrigin(5),NsxBasic.TimeOrigin(6),NsxBasic.TimeOrigin(7), ...
    NsxBasic.TimeOrigin(1),NsxBasic.TimeOrigin(2),NsxBasic.TimeOrigin(4));
NsxBasic.NumElec = fread(NsxID, 1, 'uint32=>uint32');
CurrPos = ftell(NsxID);
if CurrPos~=314
    error('FAILURE: Error in reading basic header');
end
if CurrPos+NsxBasic.NumElec*66~=NsxBasic.HeaderSize
    error('FAILURE: Error in the size of extended headers.');
end
fclose(NsxID);
%% process extended headers
NsxID = fopen(NsxPath);
fseek(NsxID, 314, -1);
NsxExtend = cell(NsxBasic.NumElec, 1);
PacketID = fread(NsxID, [2 NsxBasic.NumElec], '2*char=>char', 66-2);
ElecOrder = zeros(NsxBasic.NumElec, 1);
for i = 1:NsxBasic.NumElec
    CurrStartPos = CurrPos+(i-1)*66+2;  %electrode ID
    fseek(NsxID, CurrStartPos, 'bof');
    NsxExtend{i,1}.PacketID = sprintf('%s', PacketID(:,i));
    switch NsxExtend{i,1}.PacketID
        case 'CC'  %continuous channels
            ElecOrder(i,1) = fread(NsxID, 1, 'uint16');
            NsxExtend{i,1}.ElecID = ElecOrder(i,1);
            NsxExtend{i,1}.ElecLabel = sprintf('%s', fread(NsxID, 16, 'char=>char'));
            NsxExtend{i,1}.Connector = char(64+fread(NsxID, 1, 'char=>char'));
            NsxExtend{i,1}.Pin = fread(NsxID, 1, 'char=>char');
            NsxExtend{i,1}.MinDigitalValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.MaxDigitalValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.MinAnalogValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.MaxAnalogValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.AnalogUnit = sprintf('%s', fread(NsxID, 16, 'char=>char'));  %mv/uv
            NsxExtend{i,1}.HighCutFreq = fread(NsxID, 1, 'uint32=>uint32');
            NsxExtend{i,1}.HighCutOrder = fread(NsxID, 1, 'uint32=>uint32');  %0 = NONE
            NsxExtend{i,1}.HighCutType = fread(NsxID, 1, 'uint16=>uint16');
            NsxExtend{i,1}.LowCutFreq = fread(NsxID, 1, 'uint32=>uint32');
            NsxExtend{i,1}.LowCutOrder = fread(NsxID, 1, 'uint32=>uint32');  %0 = NONE
            NsxExtend{i,1}.LowCutType = fread(NsxID, 1, 'uint16=>uint16');
        otherwise
            disp('FAILURE: No current PacketID was found.');
            return;
    end
end
if numel(ElecOrder)~=numel(unique(ElecOrder))
    disp('Error in reading extended headers.');
    return;
end
CurrPos = ftell(NsxID);
if CurrPos~=NsxBasic.HeaderSize
    disp('FAILURE: Error in reading extended headers');
    return;
end
clear VerNum PachetID CurrStartPos
fclose(NsxID);
%% process data packets
NsxID = fopen(NsxPath);
fseek(NsxID,CurrPos,-1);
path = NsxPath(1:end-4);
load([path '/' 'Expmark.mat']);
NumValidElec = numel(ElecOrder);
NumTrials = size(Expmark,2);
cc = cell(NumTrials,1);
fprintf('Got %d valid electrodes.\n',NumValidElec);
fprintf('With total %d trials.\n',NumTrials);
for i = 1:NumTrials+1
%     Tstart = Expmark(i,1);
%     Tstop = Expmark(i,4);  
%     fprintf('Processing trial #%d ...\n',i);
    Header = fread(NsxID,1,'int8=>int8');
    if Header ~= 1
        error('Header seek error, abort!');
    end
    cc{i}.Timestamp = fread(NsxID,1,'uint32=>uint32');
    cc{i}.NumDP = fread(NsxID,1,'uint32=>uint32');
    cc{i}.Data = fread(NsxID,[NumValidElec,cc{i}.NumDP],'int16=>int16');
end
cc = cc(2:end);
ValidTrials = Expmark(3,:)==0 & Expmark(5,:)~=0;
CC = cc(ValidTrials);
fclose(NsxID);
if savemat
    save([NsxPath(1:end-4) '/' 'NsxBasic.mat'],'NsxBasic',matversion);
    save([NsxPath(1:end-4) '/' 'LFP.mat'],'CC',matversion);
end
%% post processing and clean up
if exist([path '/' 'temp'],'dir') == 7
    rmdir([path '/' 'temp']);
end
fprintf('All done!\n');