function LoadNsxNew(NsxPath,SamplingRate,Fp,Fst,Ap,Ast)
% help info to be added

%%%%%%%%%%%%%%%%%%%
% check argument
%%%%%%%%%%%%%%%%%%%
switch nargin
    case 1
        SamplingRate = 1000;
        Fp = 300;
        Fst = 400;
        Ap = 1;
        Ast = 60;
    case 2
        Fp = 300;
        Fst = 400;
        Ap = 1;
        Ast = 60;
    case 6
        % do nothing
    otherwise
        disp('FAILURE: Usage: LoadNsxNew(NsxPath,SamplingRate,Fp,Fst,Ap,Ast).');
        return;

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% check the validity of Nsxpath
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for i = 1:9
    NsxPath = [NsxPath(1:end-4) '.ns' num2str(i)];
    if exist(NsxPath, 'file')==2
        break;
    end
    if i==9
        disp('FAILURE: NSx file does not exist.');
        return;
    end
end
fprintf('NSX file found, start processing...\n');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% make directories to store data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
path = NsxPath(1:end-4);
if  exist(path, 'dir') ~= 7
    fprintf('%s not found!\n', path);
    error('We must load NEV first.')
end
% % path = [NsxPath(1:end-4) '/' 'ContinuousData'];
% % if exist(path, 'dir') == 7
% %     rmdir(path,'s')
% % end
% % fprintf('Creating %s\n', path);
% % mkdir(path)
% % fprintf('Creating %s\n', [path '/' 'temp']);
mkdir([path '/' 'temp']);
load([path '/' 'Expmark.mat'])
%%%%%%%%%%%%%%%%%%%%%%%%%%%
% process basic header
%%%%%%%%%%%%%%%%%%%%%%%%%%%
NsxID = fopen(NsxPath,'r');
fseek(NsxID, 0, 1);
NsxSize = uint64(ftell(NsxID));
fprintf('NSX file size is %dMB\n',NsxSize/1024^2)
frewind(NsxID);
NsxBasic.FileType = sprintf('%s', fread(NsxID, 8, '*char'));
% check file type ID
if ~strcmp(NsxBasic.FileType, 'NEURALCD')
    error('NSX FileType mismatch!')
end
VerNum = fread(NsxID, 2, 'uchar=>uchar');
NsxBasic.FileVersion = ['Spec. ' num2str(VerNum(1)) '.' num2str(VerNum(2))];
NsxBasic.HeaderSize = fread(NsxID, 1, 'uint32=>uint32');
NsxBasic.Label = sprintf('%s', fread(NsxID, 16, 'char=>uint32'));
% NsxBasic.Comment = sprintf('%s', fread(NsxID, 256, '*char'));
fseek(NsxID, 256, 0);
NsxBasic.Period = fread(NsxID, 1, 'uint32=>uint32');
NsxBasic.ClockFs = fread(NsxID, 1, 'uint32=>uint32');
NsxBasic.Fs = NsxBasic.ClockFs/NsxBasic.Period;
NsxBasic.TimeOrigin = fread(NsxID, [1 8], 'uint16=>uint16');
fprintf('NSX file created at %d:%d:%d %d-%d-%d\n',NsxBasic.TimeOrigin(5),NsxBasic.TimeOrigin(6),NsxBasic.TimeOrigin(7), ...
    NsxBasic.TimeOrigin(1),NsxBasic.TimeOrigin(2),NsxBasic.TimeOrigin(4));
NsxBasic.NumElec = fread(NsxID, 1, 'uint32=>uint32');
CurrPos = ftell(NsxID);
if CurrPos~=314
    error('FAILURE: Error in reading basic header');
end
if CurrPos+NsxBasic.NumElec*66~=NsxBasic.HeaderSize
    error('FAILURE: Error in the size of extended headers.');
end
fclose(NsxID);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% process extended headers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
NsxID = fopen(NsxPath);
fseek(NsxID, 314, -1);
NsxExtend = cell(NsxBasic.NumElec, 1);
PacketID = fread(NsxID, [2 NsxBasic.NumElec], '2*char=>char', 66-2);
ElecOrder = zeros(NsxBasic.NumElec, 1);
for i = 1:NsxBasic.NumElec
    CurrStartPos = CurrPos+(i-1)*66+2;  %electrode ID
    fseek(NsxID, CurrStartPos, 'bof');
    NsxExtend{i,1}.PacketID = sprintf('%s', PacketID(:,i));
    switch NsxExtend{i,1}.PacketID
        case 'CC'  %continuous channels
            ElecOrder(i,1) = fread(NsxID, 1, 'uint16');
            NsxExtend{i,1}.ElecID = ElecOrder(i,1);
            NsxExtend{i,1}.ElecLabel = sprintf('%s', fread(NsxID, 16, 'char=>char'));
            NsxExtend{i,1}.Connector = char(64+fread(NsxID, 1, 'char=>char'));
            NsxExtend{i,1}.Pin = fread(NsxID, 1, 'char=>char');
            NsxExtend{i,1}.MinDigitalValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.MaxDigitalValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.MinAnalogValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.MaxAnalogValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.AnalogUnit = sprintf('%s', fread(NsxID, 16, 'char=>char'));  %mv/uv
            NsxExtend{i,1}.HighCutFreq = fread(NsxID, 1, 'uint32=>uint32');
            NsxExtend{i,1}.HighCutOrder = fread(NsxID, 1, 'uint32=>uint32');  %0 = NONE
            NsxExtend{i,1}.HighCutType = fread(NsxID, 1, 'uint16=>uint16');
            NsxExtend{i,1}.LowCutFreq = fread(NsxID, 1, 'uint32=>uint32');
            NsxExtend{i,1}.LowCutOrder = fread(NsxID, 1, 'uint32=>uint32');  %0 = NONE
            NsxExtend{i,1}.LowCutType = fread(NsxID, 1, 'uint16=>uint16');
        otherwise
            disp('FAILURE: No current PacketID was found.');
            return;
    end
end
if numel(ElecOrder)~=numel(unique(ElecOrder))
    disp('Error in reading extended headers.');
    return;
end
CurrPos = ftell(NsxID);
if CurrPos~=NsxBasic.HeaderSize
    disp('FAILURE: Error in reading extended headers');
    return;
end
clear VerNum PachetID CurrStartPos
fclose(NsxID);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Design FIR filter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
RawSamplingRate = double(NsxBasic.ClockFs);
TargetSamplingRate = 3e4;
d=fdesign.lowpass('Fp,Fst,Ap,Ast',Fp,Fst,Ap,Ast,TargetSamplingRate);
Hd = design(d,'equiripple');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% load trial data into memory
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
NsxID = fopen(NsxPath);
fseek(NsxID,CurrPos,-1);
NumValidElec = numel(ElecOrder);
fprintf('Got %d valid electrodes.\n',NumValidElec);
NumTrials = size(Expmark,2);
ValidTrials = Expmark(3,:)==0 & Expmark(5,:) ~= 0;
fprintf('With total %d trials.\n',NumTrials);
SpikeCache = cell(NumValidElec,NumTrials);
Header = fread(NsxID,1,'int8=>int8');
if Header ~= 1
    error('Header seek error, abort!');
end
Timestamp = fread(NsxID,1,'uint32=>uint32');
NumDP = fread(NsxID,1,'uint32=>uint32');
TrialOneLength = Expmark(4,1)-Expmark(1,1);
if NumDP ~= TrialOneLength;
    fprintf('NumDP is %d while it should be %d\nInvalid first trial, start from data packet #2\n',NumDP,TrialOneLength);
    fread(NsxID,[NumValidElec,NumDP],'int16=>int16');
else
    fseek(NsxID,CurrPos,-1);
end
TrialCounter = 0;
for TrialIdx = 1:NumTrials
    if ~ValidTrials(TrialIdx)
        Header = fread(NsxID,1,'int8=>int8');
        if Header ~= 1
            error('Header seek error, abort!');
        end
        Timestamp = fread(NsxID,1,'uint32=>uint32');
        NumDP = fread(NsxID,1,'uint32=>uint32');
        if NumDP ~= Expmark(4,TrialIdx)-Expmark(1,TrialIdx)
            error(['NumDP is ' num2str(NumDP) ' while we thought it should be ' num2str(Expmark(4,TrialIdx)-Expmark(1,TrialIdx))])
        end
        jumpstepsize = NumValidElec * NumDP * 2; % int16 has 2 bytes
        fseek(NsxID,jumpstepsize,0);
        continue
    end
    Header = fread(NsxID,1,'int8=>int8');
    if Header ~= 1
        error('Header seek error, abort!');
    end
    Timestamp = fread(NsxID,1,'uint32=>uint32');
    if Timestamp ~= Expmark(1,TrialIdx)
        CalibrationVal = Timestamp-Expmark(1,TrialIdx);
    end
    NumDP = fread(NsxID,1,'uint32=>uint32');
    if NumDP ~= Expmark(4,TrialIdx)-Expmark(1,TrialIdx)
        error(['NumDP is ' num2str(NumDP) ' while we thought it should be ' num2str(Expmark(4,TrialIdx)-Expmark(1,TrialIdx))])
    end
    fprintf('.');
    TrialCounter =TrialCounter +1;
    if mod(TrialCounter,30) == 0
        fprintf('%d\n',TrialCounter)
    end
    % read trial data into Data
    Data = double(fread(NsxID,[NumValidElec,NumDP],'int16=>int16'));
    NumDp = size(Data,2);
    % if the raw frequency is not 3e4, then spline the data to make it 3e4
    if RawSamplingRate ~= 3e4
        Fraction = RawSamplingRate/TargetSamplingRate;
        TargetDp = NumDp / Fraction;
        Data = spline(1:NumDp,Data,linspace(1,NumDp,TargetDp));
    end
    Filted_Data = filtfilt(Hd.Numerator,1,Data');
    % resample the data to 1000samples/second
    idx = round(linspace(1,size(Filted_Data,1),round(size(Filted_Data,1)/3e4*SamplingRate)));
    Filted_Data = Filted_Data(idx,:);
    save([path '/' 'temp' '/' 'trial' num2str(TrialIdx) '.mat'],'Filted_Data')
end
fclose(NsxID);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Read disk cache back and get data by electrode %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
CC = cell(96,1);
NumElec = numel(ElecOrder);
for TrialIdx = 1:NumTrials
    matpath = [path '/' 'temp' '/' 'trial' num2str(TrialIdx) '.mat'];
    if exist(matpath,'file')
        load(matpath)
    else
        continue
    end
    for ElecIdx = 1:NumElec
        CC{ElecOrder(ElecIdx)}{TrialIdx} = Filted_Data(:,ElecIdx);
    end
end
% save data
savepath = [path '/' 'CC.mat'];
save(savepath,'CC');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% post processing and clean up
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if exist([path '/' 'temp'],'dir') == 7
    rmdir([path '/' 'temp'],'s');
end
fprintf('All done!\n');