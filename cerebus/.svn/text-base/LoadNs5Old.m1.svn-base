function LoadNs5Old(filepath,savewave)
%LOADSPIKE will filter 30KHz Nsx files and find zero phase shifted spike
%time, construct experiment event matrix from nev and save wave form.
% filtertype 1 = cerebus, 2 = custom
%% configurations all goes here
% matversion = '-v7';
% use butterworth hi pass 300hz, and equiripple low pass 3000hz
Impulse_root_path = '/home/wang/Documents/MATLAB/ImpulseToolbox';
% % % path = [Impulse_root_path '/cerebus/filter/iirhipass300.mat'];
% % % load(path);
% % % path = [Impulse_root_path '/cerebus/filter/iirlowpass3000.mat'];
% % % load(path);
% % % SOShipass300 = SOShipass300;
% % % Ghipass300 = Ghipass300;
% % % SOSlowpass3000 = SOSlowpass3000;
% % % Glowpass3000 = Glowpass3000;
path = [Impulse_root_path '/cerebus/filter/firbandpass300_3000.mat'];
load(path);
Num = Num;
SampleRate = 30000;
% WinSize = 1.5; % ms
% SamplePoints = ceil(SampleRate / 1000 * WinSize);
SamplePoints = 64;
RefPeriod = 0.1; %ms
TimeShift = 0.7; %ms
PointShift = 20; %round(SampleRate / 1000 * TimeShift);
sPointShift = round(PointShift / 2); % used for peak alignment
Threshold = 0; %mv >=0 means auto threshold
AutoTresholding = 1;
% thresprc = 0.2; % auto threshold percentage. Signal exceeded this percentage will considered a spike
xEstimation = -4; % auto thresholding with x times estimation
MinTrialLength = 500; % ms
%% construct experiment event matrix from nev file
% verify the validity of input arguments
switch nargin
    case 1
        savewave = 1; % spike sorting is very important and mean to be the very next step before any analysis. So if you don't want store spike wave form, state it explicitly.
    case 2
        % temporally doing nothing
    otherwise
        fprintf('failure: LoadNs5 accepts 2 input arguments.\n'); return;
end
% check the validity of the nev & mbm files specified
Ns5Path = [filepath(1: end-3) 'ns5'];
if exist(Ns5Path,'file') == 2
%     fprintf('ns5 file found ...\n');
    % create folders for storing mat files
    matdir = filepath(1: end-4);
    if exist(matdir,'dir') == 7
        rmdir(matdir,'s');
    end
    if mkdir(matdir)
%         fprintf('%s created\n',matdir)
    else
        error('matlab:mkdirfailed','failed to make directory for the mat file')
    end
    fileattrib(matdir, '+w');
    nevpath = [filepath(1: end-3) 'nev'];
    if exist(nevpath,'file') == 2
%         fprintf('nev file found ...\n');
    else
        error('matlab:filenotfound','nev file not found!')
    end
else
    error('matlab:filenotfound','ns5 file not found!');
end
% disp('the file path is valid, starting to process data ...');
% process nev file
% load Nev data packets
nevpath = [filepath(1:end-4) '.nev'];
expmarkpath = [filepath(1:end-4) '/' 'Expmark.mat'];
LoadNev(nevpath,1:96,0);
load(expmarkpath)
%% load 30KHz continuous signal trial by trial hi pass filter find spike and save wave form.
% process basic header
NsxID = fopen(Ns5Path,'r');
fseek(NsxID, 0, 1);
NsxSize = uint64(ftell(NsxID));
fprintf('NS5 file size is %dMB\n',NsxSize/1024^2)
frewind(NsxID);
NsxBasic.FileType = sprintf('%s', fread(NsxID, 8, '*char'));
% check file type ID
if ~strcmp(NsxBasic.FileType, 'NEURALCD')
    error('NS5 FileType mismatch!')
end
VerNum = fread(NsxID, 2, 'uchar=>uchar');
NsxBasic.FileVersion = ['Spec. ' num2str(VerNum(1)) '.' num2str(VerNum(2))];
NsxBasic.HeaderSize = fread(NsxID, 1, 'uint32=>uint32');
NsxBasic.Label = sprintf('%s', fread(NsxID, 16, 'char=>uint32'));
% NsxBasic.Comment = sprintf('%s', fread(NsxID, 256, '*char'));
fseek(NsxID, 256, 0);
NsxBasic.Period = fread(NsxID, 1, 'uint32=>uint32');
NsxBasic.ClockFs = fread(NsxID, 1, 'uint32=>uint32');
NsxBasic.Fs = NsxBasic.ClockFs/NsxBasic.Period;
NsxBasic.TimeOrigin = fread(NsxID, [1 8], 'uint16=>uint16');
fprintf('NS5 file created at %d:%d:%d %d-%d-%d\n',NsxBasic.TimeOrigin(5),NsxBasic.TimeOrigin(6),NsxBasic.TimeOrigin(7), ...
    NsxBasic.TimeOrigin(1),NsxBasic.TimeOrigin(2),NsxBasic.TimeOrigin(4));
NsxBasic.NumElec = fread(NsxID, 1, 'uint32=>uint32');
CurrPos = ftell(NsxID);
if CurrPos~=314
    error('FAILURE: Error in reading basic header');
end
if CurrPos+NsxBasic.NumElec*66~=NsxBasic.HeaderSize
    error('FAILURE: Error in the size of extended headers.');
end
fclose(NsxID);
% process extended headers
NsxID = fopen(Ns5Path);
fseek(NsxID, 314, -1);
NsxExtend = cell(NsxBasic.NumElec, 1);
PacketID = fread(NsxID, [2 NsxBasic.NumElec], '2*char=>char', 66-2);
ElecOrder = zeros(NsxBasic.NumElec, 1);
for i = 1:NsxBasic.NumElec
    CurrStartPos = CurrPos+(i-1)*66+2;  %electrode ID
    fseek(NsxID, CurrStartPos, 'bof');
    NsxExtend{i,1}.PacketID = sprintf('%s', PacketID(:,i));
    switch NsxExtend{i,1}.PacketID
        case 'CC'  %continuous channels
            ElecOrder(i,1) = fread(NsxID, 1, 'uint16');
            NsxExtend{i,1}.ElecID = ElecOrder(i,1);
            NsxExtend{i,1}.ElecLabel = sprintf('%s', fread(NsxID, 16, 'char=>char'));
            NsxExtend{i,1}.Connector = char(64+fread(NsxID, 1, 'char=>char'));
            NsxExtend{i,1}.Pin = fread(NsxID, 1, 'char=>char');
            NsxExtend{i,1}.MinDigitalValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.MaxDigitalValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.MinAnalogValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.MaxAnalogValue = fread(NsxID, 1, 'int16=>int16');
            NsxExtend{i,1}.AnalogUnit = sprintf('%s', fread(NsxID, 16, 'char=>char'));  %mv/uv
            NsxExtend{i,1}.HighCutFreq = fread(NsxID, 1, 'uint32=>uint32');
            NsxExtend{i,1}.HighCutOrder = fread(NsxID, 1, 'uint32=>uint32');  %0 = NONE
            NsxExtend{i,1}.HighCutType = fread(NsxID, 1, 'uint16=>uint16');
            NsxExtend{i,1}.LowCutFreq = fread(NsxID, 1, 'uint32=>uint32');
            NsxExtend{i,1}.LowCutOrder = fread(NsxID, 1, 'uint32=>uint32');  %0 = NONE
            NsxExtend{i,1}.LowCutType = fread(NsxID, 1, 'uint16=>uint16');
        otherwise
            disp('FAILURE: No current PacketID was found.');
            return;
    end
end
if numel(ElecOrder)~=numel(unique(ElecOrder))
    disp('Error in reading extended headers.');
    return;
end
CurrPos = ftell(NsxID);
if CurrPos~=NsxBasic.HeaderSize
    disp('FAILURE: Error in reading extended headers');
    return;
end
clear VerNum PacketID CurrStartPos
fclose(NsxID);
% load trial data into memory
NsxID = fopen(Ns5Path);
fseek(NsxID,CurrPos,-1);
NumValidElec = numel(ElecOrder);
fprintf('Got %d valid electrodes.\n',NumValidElec);
NumTrials = size(Expmark,2);
ValidTrials = ~(~Expmark(3,:)==0 | Expmark(5,:) == 0);
fprintf('With total %d trials.\n',NumTrials);
SpikeCache = cell(NumValidElec,NumTrials);
if savewave
    WaveCache = cell(NumValidElec,NumTrials);
end
Header = fread(NsxID,1,'int8=>int8');
if Header ~= 1
    error('Header seek error, abort!');
end
Timestamp = fread(NsxID,1,'uint32=>uint32');
NumDP = fread(NsxID,1,'uint32=>uint32');
TrialOneLength = Expmark(4,1)-Expmark(1,1);
if NumDP ~= TrialOneLength;
    fprintf('NumDP is %d while it should be %d\nInvalid first trial, start from data packet #2\n',NumDP,TrialOneLength);
    fread(NsxID,[NumValidElec,NumDP],'int16=>int16');
else
    fseek(NsxID,CurrPos,-1);
end
TrialCounter = 0;
for i = 1:NumTrials
    if ~ValidTrials(i)
        Header = fread(NsxID,1,'int8=>int8');
        if Header ~= 1
            error('Header seek error, abort!');
        end
        Timestamp = fread(NsxID,1,'uint32=>uint32');
        NumDP = fread(NsxID,1,'uint32=>uint32');
        if NumDP ~= Expmark(4,i)-Expmark(1,i)
            error(['NumDP is ' num2str(NumDP) ' while we thought it should be ' num2str(Expmark(4,i)-Expmark(1,i))])
        end
        jumpstepsize = NumValidElec * NumDP * 2; % int16 has 2 bytes
        fseek(NsxID,jumpstepsize,0);
%         fprintf('Trial # %d invalid, skip!\n',i);
        continue
    end
    Header = fread(NsxID,1,'int8=>int8');
    if Header ~= 1
        error('Header seek error, abort!');
    end
    Timestamp = fread(NsxID,1,'uint32=>uint32');
    if Timestamp ~= Expmark(1,i)
        CalibrationVal = Timestamp-Expmark(1,i);
    end
    NumDP = fread(NsxID,1,'uint32=>uint32');
    if NumDP ~= Expmark(4,i)-Expmark(1,i)
        error(['NumDP is ' num2str(NumDP) ' while we thought it should be ' num2str(Expmark(4,i)-Expmark(1,i))])
    end
    Data = double(fread(NsxID,[NumValidElec,NumDP],'int16=>int16'))';
    %fprintf('Processing trial #%d ...\n',i);
    fprintf('.');
    TrialCounter =TrialCounter +1;
    if mod(TrialCounter,30) == 0
        fprintf('%d\n',TrialCounter)
    end
    % zero phase distortion band pass filtering the data, 300-3000Hz
% % %     Data = filtfilt(SOShipass300,Ghipass300,Data);
% % %     Data = filtfilt(SOSlowpass3000,Glowpass3000,Data);
    Data = filtfilt(Num,1,Data);
    for j = 1:NumValidElec
        wave = Data(:,j);
        % find spike time
        if AutoTresholding
            Threshold = xEstimation * median(abs(wave))/0.6745; % improved estimation adopted from Quian Quiroga et al., 2004
        end
        %poz = double([zeros(round(SampleRate*0.002),1);Data(1+round(SampleRate*0.002):end-round(SampleRate*0.002),j);zeros(round(SampleRate*0.002),1)]<Threshold);
        poz = double(wave < Threshold);
        Kernel = ones(round(SampleRate / 1000 * RefPeriod),1);
        for k = 1:2
            poz = conv(Kernel,poz);
        end
        rawStamp = find(poz == 1);
        odd = rawStamp(1:2:end);
        even = rawStamp(2:2:end);
        SpikeStamp = zeros(numel(odd),1);
        for k = 1:numel(odd)
            if odd(k)-sPointShift>0 && even(k)+sPointShift<=length(wave)
                y = wave(odd(k)-sPointShift:even(k)+sPointShift);
            elseif odd(k)-sPointShift<=0 && even(k)+sPointShift<=length(wave)
                y =[zeros(sPointShift-odd(k)+1,1);wave(1:even(k)+sPointShift)];
            elseif odd(k)-sPointShift>0 && even(k)+sPointShift>length(wave)
                y = [wave(odd(k)-sPointShift:end);zeros(even(k) + sPointShift - length(wave) - 1, 1)];
            end
            yy = spline(0:length(y)-1,y,linspace(0,length(y)-1,256));
            yymin = min(yy);
            dy = abs(y - yymin);
            [~,minidx] = min(dy);
            SpikeStamp(k) = odd(k)+minidx-sPointShift;
        end
        if savewave
            % extract wave form
            WaveForm = zeros(SamplePoints,numel(SpikeStamp));
            for k = 1: numel(SpikeStamp)
                if SpikeStamp(k) - PointShift> 0 && SpikeStamp(k) - PointShift + SamplePoints - 1 < length(wave)
                    WaveForm(:,k) = wave(SpikeStamp(k) - PointShift : SpikeStamp(k) - PointShift + SamplePoints - 1);
                elseif SpikeStamp(k) - PointShift> 0 && SpikeStamp(k) - PointShift + SamplePoints - 1 >=  length(wave)
                    WaveForm(:,k) = [wave(SpikeStamp(k) - PointShift : end);zeros(SpikeStamp(k) - PointShift + SamplePoints - 1 - length(wave),1)];
                elseif SpikeStamp(k) - PointShift<= 0 && SpikeStamp(k) - PointShift + SamplePoints - 1 <  length(wave)
                    WaveForm(:,k) = [zeros(PointShift-SpikeStamp(k)+1,1);wave(1 : SpikeStamp(k) - PointShift + SamplePoints - 1)];
                end
            end
            WaveCache{j,i} = WaveForm;
        end
        % store spike time in cache
        SpikeCache{j,i} = int32(SpikeStamp'-double(Expmark(5,i)-Expmark(1,i)+CalibrationVal));
        % visual inspection, for debugging
        if 0
            figure,hold on
            plot(wave,'black') % plot filtered signal
            plot([0,length(wave)],[Threshold,Threshold],'green') % plot threshold
            plot(SpikeStamp,repmat(Threshold,numel(SpikeStamp),1),'redo') % plot spike stamps
            % plot wave form on filtered signal
            % plot aligned wave form
            figure,hold on, plot(WaveForm,'black')
            input('continue')
            close all
        end
    end
end
fprintf('\n')
% save spike time and wave form to disk
matdir = filepath(1:end-4);
fprintf('Saving everything to files ...');
Spike = cell(96,1);
for i = 1:NumValidElec
    Spike{ElecOrder(i)} = SpikeCache(i,:);
end
filename = [matdir '/' 'Spike5.mat'];
save(filename,'Spike');
if savewave
    for i = 1:NumValidElec
        filename = [matdir '/' 'Elec' num2str(ElecOrder(i)) 'Waveform5.mat'];
        Waveform = WaveCache(i,ValidTrials);
        Waveform = cell2mat(Waveform);
        save(filename,'Waveform');
    end
end
fprintf('Done!\n');
%% finish up
TempDir = [nevpath(1:end-4) '/' 'temp'];
if exist(TempDir,'dir') == 7
    rmdir(TempDir,'s');
end
fprintf('All done!\n')
return
function data=LoadData(nevpath,ZeroStartPoz,skip,datatype)
% open nev file
nevid = fopen(nevpath,'r');
fseek(nevid,ZeroStartPoz,-1);
data = fread(nevid,datatype,skip);
fclose(nevid);
return