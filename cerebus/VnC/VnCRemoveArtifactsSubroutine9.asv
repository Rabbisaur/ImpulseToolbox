function [ARdata,ArtifactLocation,Interpolateddata,WaveDPbefore,WaveDPafter] = VnCRemoveArtifactsSubroutine9(RawTrace,StimulationParam,StimStartTime,SampleRate,EID,thisInstance,instanceinfo)

if ispc
    slash = '\';
else
    slash = '/';
end

tau = 0.003; % sec
SSrate = 1; % super sampling rate
% cycleLimit = 100;
% ThresholdGain = 3;

% alpha = 0.1;

% inputs
if size(RawTrace,2) > size(RawTrace,1)
    RawTrace = RawTrace';
end
% parameters
StimulationPulsesFrequency = StimulationParam.PulsesFrequency;
numberofStimPulses = StimulationParam.numberofStimPulses;
% WaveDPbefore = StimulationParam.WaveDPbefore;
% WaveDPafter = StimulationParam.WaveDPafter;
% WaveformFreq = 1/StimulationParam.stimulationwaveformwidth;

Fl = 100;
Fn = SampleRate/2;
N = 4;
[BWave, AWave] = butter(N,Fl/Fn,'high'); % Waveform hi pass
HipassTrace = filtfilt(BWave, AWave,RawTrace);



NumTrials = size(RawTrace,2);
NumDP = size(RawTrace,1);

StimulationPulseInterval = 1/StimulationPulsesFrequency;

% NumPulsesBefore = floor(StimStartTime/SampleRate / StimulationPulseInterval);
% NumPulsesAfter = floor((NumDP - StimStartTime)/SampleRate / StimulationPulseInterval);
% FirstPulseDP = round(StimStartTime - NumPulsesBefore * StimulationPulseInterval * SampleRate);
% 
% numberofStimPulses = NumPulsesBefore + NumPulsesAfter + 1;
% LastPulseDP = FirstPulseDP + StimulationPulseInterval * SampleRate * numberofStimPulses;
% StimStartTime = FirstPulseDP;
% 
% NumDPpadding = 100;
% 
% RawTrace = [zeros(NumDPpadding,NumTrials);RawTrace;zeros(NumDPpadding,NumTrials)];
% HipassTrace = [zeros(NumDPpadding,NumTrials);HipassTrace;zeros(NumDPpadding,NumTrials)];
% StimStartTime = StimStartTime + NumDPpadding;


predictedLoc = (0:(numberofStimPulses-1)) * 1/StimulationPulsesFrequency * SampleRate;
predictedLoc = predictedLoc + StimStartTime;
predictedLoc = predictedLoc + StimulationParam.stimulationwaveformwidth*0.95 * SampleRate;
% predictedLoc = floor(predictedLoc);

loc0 = round(predictedLoc * SSrate);

% Find stimulation exact locations, get waveform
numSamplePoints = size(HipassTrace,1);
x = 1:numSamplePoints;
xx = 1:1/SSrate:numSamplePoints;
HipassTrace = spline(x,HipassTrace',xx)';
RawTrace = spline(x,RawTrace',xx)';

StimWidth = 1/StimulationPulsesFrequency/2;
idx = (0:round(StimWidth*SampleRate*SSrate-1))';
WaveLength = numel(idx);
idx = idx - floor(max(idx)/2);
idx1 = repmat(idx,1,numberofStimPulses);
idx1 = idx1 + repmat(loc0,numel(idx),1);
d = zeros(WaveLength,NumTrials);

h = figure('position',[100 100 900 700]);

for thisTrial = 1:NumTrials
    Waveform = HipassTrace(idx1,thisTrial);
    Waveform = reshape(Waveform,numel(idx),numberofStimPulses);
%     figure
%     hold on
    %     plot(Waveform,'black')
    subplot(2,2,1)
    hold on
    plot(mean(Waveform,2))
    meanWaveform = mean(Waveform,2);
    %     K = (meanWaveform(2:end) - meanWaveform(1))./(1:(numel(meanWaveform)-1))'*;
    %     plot(K,'blue','linewidth',2)
%     counter = 0;    
    for InterpWidth = 1:2:WaveLength-2
%         counter = counter + 1;
        interpIdx = floor(WaveLength / 2 + (0:(InterpWidth-1)) - (InterpWidth/2)+1);
        x = 1:WaveLength;
        x(interpIdx) = [];
        tmp = meanWaveform;
        tmp(interpIdx) = [];
        xx = 1:WaveLength;
        tmp = interp1(x,tmp,xx);
        d(InterpWidth,thisTrial) = sum((tmp' - mean([meanWaveform(1),meanWaveform(end)])).^2);
    end
    if mod(size(d,1),2) == 0
        d(2:2:end,thisTrial) = d(1:2:end,thisTrial);
    else
        d(2:2:end,thisTrial) = d(1:2:end-1,thisTrial);
    end
    subplot(2,2,2)
    hold on
end






d(isnan(d)) = 0;
Dmax = max(d,[],2);
plot(d)
plot(mean(d,2),'blue','linewidth',2)
plot(Dmax,'red','linewidth',2)
Dmax = smooth(Dmax,5);
Dmax = Dmax(1:end-3);
Dmax = Dmax - mean(Dmax(round(end*2/3):end));
threshold = std(Dmax(round(end*2/3):end));
% idx = find(Dmax<threshold,1,'first');
K = (Dmax-Dmax(end))./(numel(Dmax):-1:1)';
tmp = K(round(numel(K)*2/3):end);
threshold2 = mean(tmp) + std(tmp)*2;
idx2 = find(K>threshold2);
tmp = find(diff(idx2)~=1,1,'first');
if isempty(tmp)
    idx2 = idx2
end
subplot(2,2,3)
hold on
plot(Dmax)
% plot(K)
% plot([1 numel(K)],[threshold2 threshold2])
% plot([idx2 idx2],[min(K) max(K)])

plot([1 numel(Dmax)],[threshold threshold])
plot([idx2 idx2],[min(Dmax) max(Dmax)])

WaveDPbefore = (idx2/2+1)/SSrate;
WaveDPafter = WaveDPbefore;

disp(['AR interpolation length = ',num2str(WaveDPbefore*2/SampleRate*1000), 'ms'])

NumPulsesBefore = floor(StimStartTime/SampleRate / StimulationPulseInterval);
NumPulsesAfter = floor((NumDP - StimStartTime)/SampleRate / StimulationPulseInterval);
FirstPulseDP = round(StimStartTime - NumPulsesBefore * StimulationPulseInterval * SampleRate);

numberofStimPulses = NumPulsesBefore + NumPulsesAfter + 1;
% LastPulseDP = FirstPulseDP + StimulationPulseInterval * SampleRate * numberofStimPulses;
StimStartTime = FirstPulseDP;

NumDPpadding = 100*SSrate;
RawTrace = [zeros(NumDPpadding,NumTrials);RawTrace;zeros(NumDPpadding,NumTrials)];

StimStartTime = StimStartTime + NumDPpadding/SSrate;
predictedLoc = (0:(numberofStimPulses-1)) * 1/StimulationPulsesFrequency * SampleRate;
predictedLoc = predictedLoc + StimStartTime;
predictedLoc = predictedLoc + StimulationParam.stimulationwaveformwidth*0.95 * SampleRate;
% predictedLoc = floor(predictedLoc);

loc0 = round(predictedLoc * SSrate);


Interpolateddata = RawTrace;
ArtifactLocation = zeros(numberofStimPulses,NumTrials);

idx = round(-WaveDPbefore* SSrate) : round(WaveDPafter* SSrate);

numinterpDP = numel(idx);
if size(idx,2)>size(idx,1) % column
    idx = idx';
end
idx = repmat(idx,1,numel(loc0));
if size(loc0,1)>size(loc0,2) % row
    loc0 = loc0';
end
loc = repmat(loc0,numinterpDP,1);
idx = idx + loc;

subplot(2,2,4)
hold on
for thisTrial = 1:NumTrials
    ArtifactLocation(:,thisTrial) = loc0;
    % linear interpolate
    y = RawTrace(:,thisTrial);
    x = 1:numel(y);
    xx = x;
    x(idx) = [];
    y(idx) = [];
    waveform = Interpolateddata(idx,thisTrial);
    waveform = reshape(waveform',[],numberofStimPulses);
    maxvalue = max(waveform,[],1);
    minvalue = min(waveform,[],1);
    [~,idx2]=max(maxvalue - minvalue);
    plot(waveform(:,idx2)-mean([waveform(1,idx2),waveform(end,idx2)]),'black');
    Interpolateddata(:,thisTrial) = interp1(x,y,xx,'linear');
    waveform = Interpolateddata(idx,thisTrial);
    waveform = reshape(waveform',[],numberofStimPulses);
    plot(waveform(:,idx2)-mean([waveform(1,idx2),waveform(end,idx2)]),'red');
end

% save figure
idx2 = find(instanceinfo(thisInstance).electrodeCachePath{EID} == slash,3,'last');
idx2 = idx2(1);
dirpath = [instanceinfo(thisInstance).electrodeCachePath{EID}(1:idx2),'debugimg'];
if exist(dirpath,'dir')==7
else
    mkdir(dirpath)
end
savepath = [dirpath,'/',num2str(EID),'AR.png'];
saveas(h,savepath)
% savepath = [dirpath,'/',num2str(EID),'AR.fig'];
% saveas(h,savepath)
close(h)

% inspect interpolation result
% if true
%     figure
%     hold on
%     plot(mean(Interpolateddata,2))
%     plot(loc0, max(mean(Interpolateddata,2))*ones(size(loc0)),'rx')
%     plot(idx,max(mean(Interpolateddata,2))*ones(size(idx)),'r.')
% end

ARdata = Interpolateddata;

for thisTrial = 1:NumTrials
    % use salpa algorithm to remove exponential decay.
    yy = Interpolateddata(:,thisTrial);
    y = salpa(yy,'tau',round(tau*SampleRate*SSrate));
    
    nanidx = isnan(y);
    y(nanidx) = Interpolateddata(nanidx,thisTrial);
    ARdata(:,thisTrial) = y;
end
if true
    [~,idx3] = max(max(RawTrace,[],1)-min(RawTrace,[],1));
    h=figure('position',[100 100 900 700]);
    hold on
    plot(RawTrace(:,idx3))
    plot(Interpolateddata(:,idx3))
    plot(ARdata(:,idx3))
    
    plot(loc0, max(mean(ARdata,2))*ones(size(loc0)),'rx')
    plot(idx,80*ones(size(idx)),'r.')
    % save figure
    idx2 = find(instanceinfo(thisInstance).electrodeCachePath{EID} == slash,3,'last');
    idx2 = idx2(1);
    dirpath = [instanceinfo(thisInstance).electrodeCachePath{EID}(1:idx2),'debugimg'];
    if exist(dirpath,'dir')==7
    else
        mkdir(dirpath)
    end
    savepath = [dirpath,'/',num2str(EID),'biggestTrialCompare.png'];
    saveas(h,savepath)
    savepath = [dirpath,'/',num2str(EID),'biggestTrialCompare.fig'];
    saveas(h,savepath)
    close(h)
end

% remove padding
if NumDPpadding > 0
    ARdata = ARdata((NumDPpadding+1):(end-NumDPpadding),:);
    Interpolateddata = Interpolateddata((NumDPpadding+1):(end-NumDPpadding),:);
    ArtifactLocation = ArtifactLocation - NumDPpadding;
end

% downsample
ARdata = downsample(ARdata,SSrate);
Interpolateddata = downsample(Interpolateddata,SSrate);
ArtifactLocation = round(ArtifactLocation/SSrate);
WaveDPbefore = round(WaveDPbefore/SSrate);
WaveDPafter = WaveDPbefore;

end