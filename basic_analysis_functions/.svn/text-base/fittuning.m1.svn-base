function param = fittuning(nevpath,standard,win,xdata,m_arg,ArrayMap)
% binary arguments:
% m_arg(1): plot result
% m_arg(2): fit type
% m_arg(3): 0-360 degree orientation? (cut xdata in halve)
% standard: 1 = spike.mat, 2 = spike5.mat

switch nargin
    case 5
        ArrayMap = [];
    case 6
        % do nothing
    otherwise
        error('param = fittuning(nevpath,standard,win,xdata,m_arg,mapfile)')
end
% if ~isempty(mapfile)
%     ArrayMap = LoadCmp(mapfile);
% end

unitfactor = 1000/(win(2)-win(1));
Expmark = [];
filepath = [nevpath(1:end-4) '/' 'Expmark.mat'];
load(filepath)
CondID = unique(Expmark(2,:));
i_NumCond = numel(CondID);
i_NumCondInXdata = numel(xdata);
if i_NumCond > i_NumCondInXdata
    fprintf('Warning! %s: the number of conditions(%d) in the nev exceed actual xdata(%d)!\n',nevpath,i_NumCond,i_NumCondInXdata)
    i_NumCond = i_NumCondInXdata;
end
elec = [];
c_Spike = {};
% get spike count
switch standard
    case 1
        filepath = [nevpath(1:end-4) '/' 'elec.mat'];
        load(filepath)
        filepath = [nevpath(1:end-4) '/' 'Spike.mat'];
        load(filepath);
    case 2
        filepath = [nevpath(1:end-4) '/' 'Elec5.mat'];
        load(filepath)
        filepath = [nevpath(1:end-4) '/' 'Spike5.mat'];
        load(filepath);

    otherwise
        error('standard: 1 = Spike.mat, 2 = Spike5.mat')
end
i_NumElec = numel(elec);

for i = 1 : i_NumElec
    c_Spike = [c_Spike; Spike{elec(i)}];
end

m_SpikeTrain = BinSpike(c_Spike,win(1),win(2),win(2)-win(1));
m_SpikeCount = zeros(i_NumCond,i_NumElec);
for i = 1 : i_NumCond
    Trialidx = Expmark(2,:) == CondID(i);
    i_ydata = squeeze(mean(m_SpikeTrain(Trialidx,:,:),1))*unitfactor;
    if length(i_ydata)~=size(m_SpikeCount,2)
        temp=1;
    end
    m_SpikeCount(i,:) = i_ydata;
end
if m_arg(3)
    m_xdata= zeros(i_NumCond,i_NumElec);
    tmp = linspace(-180,180,i_NumCond);
%     parfor i = 1:i_NumElec
%         idx = max(m_SpikeCount(:,i));
%         shiftsize = round(i_NumCond/3) - idx(1);
%         m_SpikeCount(:,i) = circshift(m_SpikeCount(:,i),shiftsize);
%         m_xdata(:,i) = circshift(tmp+xdata(idx(1)),round(i_NumCond/3)-find(tmp==0));
%     end
    [ymax ymaxidx] = max(m_SpikeCount,[],1);
    for i = 1:i_NumElec
        shiftsize = round(i_NumCond/3)-ymaxidx(i);
        m_SpikeCount(:,i) = circshift(m_SpikeCount(:,i),shiftsize);
        m_xdata(:,i) = circshift(tmp+xdata(ymaxidx(i)),round(i_NumCond/3)-find(tmp==0));
    end
    m_SpikeCount = m_SpikeCount(1:ceil(i_NumCond*2/3),:);
    m_xdata = m_xdata(1:ceil(i_NumCond*2/3),:);
else
    m_xdata = repmat(xdata,1,i_NumElec);
end
% curve fitting
param = zeros(6,i_NumElec);
% fit tuning curve with gaussian
for i = 1:i_NumElec
    xdata = m_xdata(:,i);
    ydata = m_SpikeCount(:,i);
    [ymax ymaxpoz] = max(ydata);
    [ymin yminpoz] = min(ydata);
    if ymax == ymin
%         fprintf('ydata is flat, cancel fitting.\n')
        continue
    end
    p0 = [ymax-ymin;xdata(ymaxpoz);(xdata(2)-xdata(1))*abs(ymaxpoz-yminpoz);ymin];
    lb = [0.000001;min(xdata);(xdata(2)-xdata(1))/4;0.000001];
    ub = [2*ymax;max(xdata);10000*p0(3);ymax];
    g=fittype(@(a,b,c,d,x) a*exp(-(x-b).^2/2/c^2)+d);
    options = fitoptions(g);
    options.StartPoint=p0;
    options.Lower=lb;
    options.Upper=ub;
    [para resnorm] = fit(xdata,ydata,g,options);
    r2 = resnorm.rsquare;
     param(:,i) =[0;para.a;para.b;para.c;para.d;r2];
end

if m_arg(1) == 1 && ~isempty(ArrayMap)
    figure
    for i = 1:i_NumElec
        g=@(para,xdata) para(1)*exp( -(xdata-para(2)).^2/2/para(3)^2 )+para(4);
        xdata = m_xdata(:,i);
        ydata = m_SpikeCount(:,i);
        xfit = linspace(xdata(1),xdata(end),numel(xdata)*1000);
        yfit = g(param(2:5,i),xfit);
        subplot(12,8,find(ArrayMap == elec(i)));
        plot(xdata,ydata,'bo');hold on
        plot(xfit,yfit,'-r', 'LineWidth', 3); hold on;
        plot(xdata,40*ones(numel(xdata),1),'g','LineWidth',1.5);
        title(['Elec' num2str(elec(i)) ' Gauss' ' Rsq = ' num2str(param(6,i),'%1.2f')],'Color','b');
        xlim([min(xdata) max(xdata)]);
        if max(yfit) > 50
            ylim([0 1.3*max(yfit)])
        else
            ylim([0 60])
        end
    end
    % draw a red cross in place of empty elecs
    emptyelec = setdiff(1:96,elec);
    for i = 1:numel(emptyelec)
        subplot(12,8,find(ArrayMap == emptyelec(i)))
        plot([0,1],[1,0],'r','LineWidth',2);hold on
        plot([0,1],[0,1],'r','LineWidth',2)
        plot([0,0],[0,1],'r','LineWidth',2)
        plot([0,1],[1,1],'r','LineWidth',2)
        plot([0,1],[0,0],'r','LineWidth',2)
        plot([1,1],[0,1],'r','LineWidth',2)
        xlim([-0.25 1.25])
        ylim([-0.25 1.25])
        title(['Elec' num2str(emptyelec(i))])
    end
end
param(1,:) = elec;

function m_SpikeTrain = BinSpike(c_Spike,i_TStart,i_TEnd,i_BinSize)
% TStart, TEnd, i_BinSize must be in intger millisecond.

% generate Edges
i_TStart = int32(i_TStart) * 30;
i_TEnd = int32(i_TEnd) * 30;
i_BinSize = int32(i_BinSize) * 30;
m_Edges = i_TStart:i_BinSize:i_TEnd;
% must bin with valid trials otherwise error will accur!
i_NumElec = size(c_Spike,1);
i_NumTrials = double(size(c_Spike,2));
i_NumBins = double(numel(m_Edges));
c_Spike = reshape(c_Spike',1,[]);
if length(c_Spike) ~= i_NumElec * i_NumTrials
    error('Number of Trials in c_Spike must be the same.')
end
m_SpikeTrain = zeros(i_NumTrials,i_NumBins-1,i_NumElec);
% Bin spikes in each trial
for j = 1 : i_NumElec
    for i = 1 : i_NumTrials
        temp = histc(c_Spike{(j-1)*i_NumTrials+i},m_Edges);
        if isempty(temp)
            temp = zeros(1,size(m_SpikeTrain,2)+1);
        end
        m_SpikeTrain(i,:,j) = temp(1:end-1);
    end
end
m_SpikeTrain = double(m_SpikeTrain);
return