function PreprocessMachineData(dirpath,arg,destpath)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Usage: PreprocessMachineData(dirpath,arg,destpath)
% arg(n)
% 1 = savewave
% 2 = Load ns5 if exists
% 3 = LoadNs5 x auto thresholding
% 4 = reload everything
% 5 = auto overwrite
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
extensionSize = 3;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Get the full path of the ImpulseToolbox root  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mfilepath = mfilename('fullpath'); % get the full path of the function .m file
idx = strfind(mfilepath,'ImpulseToolbox'); % find the index to the end of the ImpulseToolbox by the knowledge of the relative path of the function .m file in the Impulsetoolbox.
Impulse_root_path = [mfilepath(1:idx-1) 'ImpulseToolBox']; % get the full path of the root of the ImpulseToolbox
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Get path, for cerebus recording, get nev path
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
nevpath = GetFilepath(dirpath,'*.nev');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% check file name
% For each recording session, there are 6 files nev,
% mbm, eye, ccf, nsx, and log
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
NumFiles = numel(nevpath);
nsxFlag = zeros(NumFiles,1,'uint8');
for fileIdx = 1:NumFiles
    % check mbm
    pathcache = [nevpath(fileIdx).name(1:end-extensionSize) 'mbm'];
    if ~exist(pathcache,'file')
        error([pathcache ' not exist, check file!'])
    end
    % check ccf
    pathcache = [nevpath(fileIdx).name(1:end-extensionSize) 'ccf'];
    if ~exist(pathcache,'file')
        error([pathcache ' not exist, check file!'])
    end
    % check nsx
    for x = 1:5
        pathcache = [nevpath(fileIdx).name(1:end-extensionSize) 'ns' num2str(x)];
        if exist(pathcache,'file')
            nsxFlag(fileIdx) = nsxFlag(fileIdx) + bitshift(uint8(1),x);
        end
    end
    % check log
    pathcache = [nevpath(fileIdx).name(1:end-extensionSize) 'log'];
    if ~exist(pathcache,'file')
        error([pathcache ' not exist, check file!'])
    end
    % check eye
    pathcache = [nevpath(fileIdx).name(1:end-extensionSize) 'eye'];
    if ~exist(pathcache,'file')
        error([pathcache ' not exist, check file!'])
    end
    pathcache = [nevpath(fileIdx).name(1:end-extensionSize) 'ccf'];
    if ~exist(pathcache,'file')
        error([pathcache ' not exist, check file!'])
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load ns5 file if exists
% Load nev instead if not exists
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for fileIdx = 1:NumFiles
    if nsxFlag(fileIdx) >= 16 && arg(2) == 1 % check if ns5 exists
        pathcache = [nevpath(fileIdx).name(1:end-extensionSize) 'ns5'];
        matpath = GetSavePath(pathcache,'Spike5.mat');
        if ~exist(matpath,'file') || arg(4) == 1 % don't load again if already loaded
            LoadNs5(pathcache,arg(1),arg(3));
        end
    else
        pathcache = nevpath(fileIdx).name;
        matpath = GetSavePath(pathcache,'Spike.mat');
        if ~exist(matpath,'file') || arg(4) == 1 % don't load again if already loaded
            LoadNev(pathcache,1:96,arg(1));
        end
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load log file and eye file
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc
fprintf('Start Processing Log and Eye Files\n')
for fileIdx = 1:NumFiles
    pathcache = [nevpath(fileIdx).name(1:end-extensionSize) 'log'];
    matpath = GetSavePath(pathcache,'LogInfo.mat');
    if ~exist(matpath,'file') || arg(4) == 1 % don't load again if already loaded
        LoadLog(pathcache);
    end
    pathcache = [nevpath(fileIdx).name(1:end-extensionSize) 'eye'];
    matpath = GetSavePath(pathcache,'EyeData.mat');
    if ~exist(matpath,'file') || arg(4) == 1 % don't load again if already loaded
        LoadEye(pathcache);
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Guess monkey name and load array info
% Based on file naming convention: one letter monkey name + date + other
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc
fprintf('\n\n\nGuessing Monkey Names and Load Array Map\n')
for fileIdx = 1:NumFiles
    if isunix
        poz = find(nevpath(fileIdx).name == '/', 1, 'last');
    elseif ispc
        poz = find(nevpath(fileIdx).name == '\', 1, 'last');
    end
    MonkeyName = nevpath(fileIdx).name(poz+1);
    MonkeyName = upper(MonkeyName);
    ArrayInfoDir = [Impulse_root_path '/cerebus/ArrayInfo'];
    switch MonkeyName
        case 'G'
            cmpFilePath = [ArrayInfoDir '/4566-0719-0725_G_H/4566-0719-0725.cmp'];
        case 'H'
            cmpFilePath = [ArrayInfoDir '/4566-0719-0725_G_H/4566-0719-0725.cmp'];
        case 'I'
            cmpFilePath = [ArrayInfoDir '/4566-0905-0906_I/4566-0905-0906.cmp'];
        case 'J'
            cmpFilePath = [ArrayInfoDir '/4566-0524-0525_J/4566-524-525.cmp'];
        case 'K'
            cmpFilePath = [ArrayInfoDir '/4566-0719-0725_G_H/4566-0719-0725.cmp'];
        otherwise
            cmpFilePath = -1;
    end
    if ~isnumeric(cmpFilePath)
        ArrayMap = LoadCmp(cmpFilePath);
        % save ArrayMap to mat
        [savepath savedir] = GetSavePath(nevpath(fileIdx).name,'ArrayMap.mat');
        if exist(savedir,'dir')
            save(savepath,'ArrayMap')
        end
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% load XYO and fit gaussian then save into each session
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc
fprintf('\n\n\nStart Processing RF Tuning Files\n')
if ispc
    tmp_DirPath = [dirpath '\' 'RFtuningTemp'];
    tmp_MatPath = [tmp_DirPath '\' 'RFtuningFile.mat'];
    tmp_MatPath2 = [tmp_DirPath '\' 'RFtuningCache.mat'];
else
    tmp_DirPath = [dirpath '/' 'RFtuningTemp'];
    tmp_MatPath = [tmp_DirPath '/' 'RFtuningFile.mat'];
    tmp_MatPath2 = [tmp_DirPath '/' 'RFtuningCache.mat'];
end
if (~exist(tmp_MatPath,'file') && ~exist(tmp_MatPath2,'file')) || arg(4) == 1
    % re-make folder
    if ispc
        tmp_DirPath = [dirpath '\' 'RFtuningTemp'];
    else
        tmp_DirPath = [dirpath '/' 'RFtuningTemp'];
    end
    if exist(tmp_DirPath,'dir') == 7
        rmdir(tmp_DirPath,'s');
    end
    mkdir(tmp_DirPath);
    % Get all RF tuning sessions
    tuningCount = 0; % count the number of tuning sessions
    RFtuningFile = struct('MonkeyName',[],'Date',[],'o',[],'x',[],'y',[],...
        'odata',[],'xdata',[],'ydata',[],'withNs5',0,'oparam',[],'xparam',...
        [],'yparam',[]);
    for fileIdx = 1:NumFiles
        % scan for XYO data files
        LogInfoPath = [nevpath(fileIdx).name(1:end-extensionSize-1) '/LogInfo.mat'];
        if ~exist(LogInfoPath,'file')
            error([LogInfoPath ' not exist!'])
        end
        load(LogInfoPath)
        tmp_idx = strcmp(LogInfo.fieldnames,'Test Name');
        if strcmp(LogInfo.fieldvalue(tmp_idx),'RfTune')
            % found a RF tuning mapping session
            tuningCount = tuningCount + 1;
            Spike5Path = [nevpath(fileIdx).name(1:end-extensionSize-1) '/Spike5.mat'];
            if exist(Spike5Path,'file')
                RFtuningFile(tuningCount).withNs5 = 1;
            else
                RFtuningFile(tuningCount).withNs5 = 0;
            end
            if isunix
                poz = find(nevpath(fileIdx).name == '/', 1, 'last');
            elseif ispc
                poz = find(nevpath(fileIdx).name == '\', 1, 'last');
            end
            % get monkey name
            MonkeyName = nevpath(fileIdx).name(poz+1);
            MonkeyName = upper(MonkeyName);
            RFtuningFile(tuningCount).MonkeyName = MonkeyName;
            % get date
            idx = find(nevpath(fileIdx).name(poz:end) == '_', 1, 'first');
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Date = nevpath(fileIdx).name(poz+2:poz+idx-2);
            % This method is too risky!
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            tmp_DirPath = nevpath(fileIdx).name(1:end-4);
            if ispc
                tmp_LogInfoPath = [tmp_DirPath '\' 'LogInfo.mat'];
            else
                tmp_LogInfoPath = [tmp_DirPath '/' 'LogInfo.mat'];
            end
            load(tmp_LogInfoPath);
            tmp_idx = strcmpi(LogInfo.fieldnames,'Start Time');
            tmp_Date = textscan(LogInfo.fieldvalue{tmp_idx},'%s','Delimiter',',');
            tmp_Date = tmp_Date{1};
            tmp_Date = [tmp_Date{end-1} ' ' tmp_Date{end}];
            Date = datestr(datenum(tmp_Date),'yymmdd');
            RFtuningFile(tuningCount).Date = Date;
            idx = find(strcmpi(LogInfo.fieldnames,'Test ID'));
            idx = idx(1);
            RFtestID = LogInfo.fieldvalue{idx};
            idx = find(strcmpi(LogInfo.fieldnames,'Start Value'));
            idx = idx(1);
            xStart = str2double(LogInfo.fieldvalue{idx});
            idx = find(strcmpi(LogInfo.fieldnames,'End Value'));
            idx = idx(1);
            xEnd = str2double(LogInfo.fieldvalue{idx});
            idx = find(strcmpi(LogInfo.fieldnames,'Points'));
            idx = idx(1);
            xStep = str2double(LogInfo.fieldvalue{idx});
            xdata = linspace(xStart,xEnd,xStep);
            switch RFtestID
                case '0'
                    RFtuningFile(tuningCount).o = nevpath(fileIdx).name;
                    idx = find(strcmpi(LogInfo.fieldnames,'Ori'));
                    idx = idx(1);
                    RFtuningFile(tuningCount).odata = xdata + str2double(LogInfo.fieldvalue{idx});
                case '51'
                    RFtuningFile(tuningCount).x = nevpath(fileIdx).name;
                    idx = find(strcmpi(LogInfo.fieldnames,'Xp'));
                    idx = idx(1);
                    Xp = str2double(LogInfo.fieldvalue{idx});
                    idx = find(strcmpi(LogInfo.fieldnames,'FpXp'));
                    idx = idx(1);
                    FpXp = str2double(LogInfo.fieldvalue{idx});
                    RFtuningFile(tuningCount).xdata = xdata + Xp - FpXp;
                case '52'
                    RFtuningFile(tuningCount).y = nevpath(fileIdx).name;
                    idx = find(strcmpi(LogInfo.fieldnames,'Yp'));
                    idx = idx(1);
                    Yp = str2double(LogInfo.fieldvalue{idx});
                    idx = find(strcmpi(LogInfo.fieldnames,'FpYp'));
                    idx = idx(1);
                    FpYp = str2double(LogInfo.fieldvalue{idx});
                    RFtuningFile(tuningCount).ydata = xdata + Yp - FpYp;
                otherwise
                    fprintf('%s\n',LogInfoPath)
                    error('Unrecognized RF tuning test ID!')
            end
        else
            continue
        end
    end
    win = [300 800]; % time window for RF tuning spike counting, 300-800 ms
    for TuningSessionIdx = 1:tuningCount
        if ~isempty(RFtuningFile(TuningSessionIdx).o)
            path = RFtuningFile(TuningSessionIdx).o;
            standard = RFtuningFile(TuningSessionIdx).withNs5 + 1;
            fittuningArg = [0,1,1];
            xdata = RFtuningFile(TuningSessionIdx).odata';
            ArrayMapPath = [RFtuningFile(TuningSessionIdx).o(1:end-extensionSize -1) '/ArrayMap.mat'];
            load(ArrayMapPath)
            RFtuningFile(TuningSessionIdx).oparam = fittuning(path,standard,win,xdata,fittuningArg,ArrayMap);
        end
        if ~isempty(RFtuningFile(TuningSessionIdx).x)
            path = RFtuningFile(TuningSessionIdx).x;
            standard = RFtuningFile(TuningSessionIdx).withNs5 + 1;
            fittuningArg = [0,1,0];
            xdata = RFtuningFile(TuningSessionIdx).xdata';
            ArrayMapPath = [RFtuningFile(TuningSessionIdx).x(1:end-extensionSize -1) '/ArrayMap.mat'];
            load(ArrayMapPath)
            RFtuningFile(TuningSessionIdx).xparam = fittuning(path,standard,win,xdata,fittuningArg,ArrayMap);
        end
        if ~isempty(RFtuningFile(TuningSessionIdx).y)
            path = RFtuningFile(TuningSessionIdx).y;
            standard = RFtuningFile(TuningSessionIdx).withNs5 + 1;
            fittuningArg = [0,1,0];
            xdata = RFtuningFile(TuningSessionIdx).ydata';
            ArrayMapPath = [RFtuningFile(TuningSessionIdx).y(1:end-extensionSize -1) '/ArrayMap.mat'];
            load(ArrayMapPath)
            RFtuningFile(TuningSessionIdx).yparam = fittuning(path,standard,win,xdata,fittuningArg,ArrayMap);
        end
    end
    RFtuningCache = RFtuningFile;
    clear RFtuningFile;
    if ispc
        tmp_DirPath = [dirpath '\' 'RFtuningTemp'];
        tmp_MatPath = [tmp_DirPath '\' 'RFtuningFile.mat'];
        tmp_MatPath2 = [tmp_DirPath '\' 'RFtuningCache.mat'];
    else
        tmp_DirPath = [dirpath '/' 'RFtuningTemp'];
        tmp_MatPath = [tmp_DirPath '/' 'RFtuningFile.mat'];
        tmp_MatPath2 = [tmp_DirPath '/' 'RFtuningCache.mat'];
    end
    save(tmp_MatPath2,'RFtuningCache');
end
% merge tuning sessions on the same day
if ispc
    tmp_DirPath = [dirpath '\' 'RFtuningTemp'];
    tmp_MatPath = [tmp_DirPath '\' 'RFtuningFile.mat'];
    tmp_MatPath2 = [tmp_DirPath '\' 'RFtuningCache.mat'];
else
    tmp_DirPath = [dirpath '/' 'RFtuningTemp'];
    tmp_MatPath = [tmp_DirPath '/' 'RFtuningFile.mat'];
    tmp_MatPath2 = [tmp_DirPath '/' 'RFtuningCache.mat'];
end
if (~exist(tmp_MatPath,'file') && exist(tmp_MatPath2,'file')) || arg(4) == 1
    load(tmp_MatPath2);
    RFtuningFile = struct('MonkeyName',[],'Date',[],'o',[],'x',[],'y',[],...
        'odata',[],'xdata',[],'ydata',[],'oparam',[],'xparam',...
        [],'yparam',[]);
    tuningCount = numel(RFtuningCache);
    % get monkey names
    MonkeyCount = 0;
    MonkeyName = [];
    for TuningSessionIdx = 1:tuningCount
        if sum(strcmp(MonkeyName,RFtuningCache(TuningSessionIdx).MonkeyName)) == 0;
            % found a new monkey
            MonkeyCount = MonkeyCount +1;
            MonkeyName{MonkeyCount} = RFtuningCache(TuningSessionIdx).MonkeyName;
        end
    end
    % get dates for each monkey
    for MonkeyIdx = 1:MonkeyCount
        Monkey{MonkeyIdx}.Name = MonkeyName{MonkeyIdx};
        DayCount = 0;
        Date = [];
        for TuningSessionIdx = 1:tuningCount
            if strcmp(RFtuningCache(TuningSessionIdx).MonkeyName,MonkeyName{MonkeyIdx}) && ...
                    sum(strcmp(Date,RFtuningCache(TuningSessionIdx).Date)) == 0;
                % found a new day
                DayCount = DayCount +1;
                Date{DayCount} = RFtuningCache(TuningSessionIdx).Date;
            end
        end
        Monkey{MonkeyIdx}.Date = Date;
    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     for MonkeyIdx = 1:MonkeyCount
%         for DateIdx = 1:DayCount
%             RFtuningFile((MonkeyIdx-1)*MonkeyCount + DateIdx).MonkeyName = MonkeyName{MonkeyIdx};
%             RFtuningFile((MonkeyIdx-1)*MonkeyCount + DateIdx).Date = Date{DateIdx};
%         end
%     end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    RFtuningIdx = 0;
    for MonkeyIdx = 1:numel(Monkey)
        for DateIdx = 1:numel(Monkey{MonkeyIdx}.Date)
            RFtuningIdx = RFtuningIdx + 1;
            RFtuningFile(RFtuningIdx).MonkeyName = Monkey{MonkeyIdx}.Name;
            RFtuningFile(RFtuningIdx).Date = Monkey{MonkeyIdx}.Date{DateIdx};
        end
    end
    % assign RFtuningCache to RFtuningFile
    NumRFtunings = numel(RFtuningFile);
    for RFtuningIdx = 1:NumRFtunings
        for TuningSessionIdx = 1:tuningCount
            if strcmpi(RFtuningCache(TuningSessionIdx).MonkeyName, RFtuningFile(RFtuningIdx).MonkeyName) && ...
                    strcmpi(RFtuningCache(TuningSessionIdx).Date, RFtuningFile(RFtuningIdx).Date)
                if ~isempty(RFtuningCache(TuningSessionIdx).o)
                    RFtuningFile(RFtuningIdx).o = RFtuningCache(TuningSessionIdx).o;
                    RFtuningFile(RFtuningIdx).oparam = RFtuningCache(TuningSessionIdx).oparam;
                    RFtuningFile(RFtuningIdx).odata = RFtuningCache(TuningSessionIdx).odata;
                end
                if ~isempty(RFtuningCache(TuningSessionIdx).x)
                    RFtuningFile(RFtuningIdx).x = RFtuningCache(TuningSessionIdx).x;
                    RFtuningFile(RFtuningIdx).xparam = RFtuningCache(TuningSessionIdx).xparam;
                    RFtuningFile(RFtuningIdx).xdata = RFtuningCache(TuningSessionIdx).xdata;
                end
                if ~isempty(RFtuningCache(TuningSessionIdx).y)
                    RFtuningFile(RFtuningIdx).y = RFtuningCache(TuningSessionIdx).y;
                    RFtuningFile(RFtuningIdx).yparam = RFtuningCache(TuningSessionIdx).yparam;
                    RFtuningFile(RFtuningIdx).ydata = RFtuningCache(TuningSessionIdx).ydata;
                end
            end
        end
    end
    % store to temporary folder before distribute
    if ispc
        tmp_DirPath = [dirpath '\' 'RFtuningTemp'];
        tmp_MatPath = [tmp_DirPath '\' 'RFtuningFile.mat'];
    else
        tmp_DirPath = [dirpath '/' 'RFtuningTemp'];
        tmp_MatPath = [tmp_DirPath '/' 'RFtuningFile.mat'];
    end
    save(tmp_MatPath,'RFtuningFile');
end
% distribute
if ispc
    tmp_DirPath = [dirpath '\' 'RFtuningTemp'];
    tmp_MatPath = [tmp_DirPath '\' 'RFtuningFile.mat'];
else
    tmp_DirPath = [dirpath '/' 'RFtuningTemp'];
    tmp_MatPath = [tmp_DirPath '/' 'RFtuningFile.mat'];
end
load(tmp_MatPath);
for fileIdx = 1:NumFiles
    if isunix
        poz = find(nevpath(fileIdx).name == '/', 1, 'last');
    elseif ispc
        poz = find(nevpath(fileIdx).name == '\', 1, 'last');
    end
    % get monkey name
    MonkeyName = nevpath(fileIdx).name(poz+1);
    % get date
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % idx = find(nevpath(fileIdx).name(poz:end) == '_', 1, 'first');
    % Date = nevpath(fileIdx).name(poz+2:poz+idx-2);
    % Risky!
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    tmp_DirPath = nevpath(fileIdx).name(1:end-4);
    if ispc
        tmp_LogInfoPath = [tmp_DirPath '\' 'LogInfo.mat'];
    else
        tmp_LogInfoPath = [tmp_DirPath '/' 'LogInfo.mat'];
    end
    load(tmp_LogInfoPath);
    tmp_idx = strcmpi(LogInfo.fieldnames,'Start Time');
    tmp_Date = textscan(LogInfo.fieldvalue{tmp_idx},'%s','Delimiter',',');
    tmp_Date = tmp_Date{1};
    tmp_Date = [tmp_Date{end-1} ' ' tmp_Date{end}];
    Date = datestr(datenum(tmp_Date),'yymmdd');
    % find a tuning session matches the session if it exists
    matchflag = 0;
    NumRFtunings = numel(RFtuningFile);
    for TuningSessionIdx = 1:NumRFtunings
        if strcmpi(RFtuningFile(TuningSessionIdx).MonkeyName, MonkeyName) && ...
                strcmpi(RFtuningFile(TuningSessionIdx).Date, Date)
            % got a match
            matchflag = 1;
            RFtuningParam = RFtuningFile(TuningSessionIdx);
            [savepath savedir] = GetSavePath(nevpath(fileIdx).name,'RFtuningParam.mat');
            if exist(savedir,'dir')
                save(savepath,'RFtuningParam')
            end
        end
    end
    if matchflag == 0
        fprintf('%s is an orphan!\n',nevpath(fileIdx).name);
        fprintf('------!!! WARNING !!!-------\n');
        fprintf('A session without RF tuning is useless!\n');
        % error('A session without RF tuning is useless!')
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% copy mat data to destpath
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if exist('destpath','var')
    if ~exist(destpath,'dir')
        mkdir(destpath)
    end
    for fileIdx = 1:NumFiles
        if isunix
            poz = find(nevpath(fileIdx).name=='/',1,'last');
        elseif ispc
            poz = find(nevpath(fileIdx).name=='\',1,'last');
        end
        dirname = nevpath(fileIdx).name(poz+1:end-extensionSize-1);
        dirpath = nevpath(fileIdx).name(1:end-extensionSize-1);
        destdirname = [destpath '/' dirname];
        if exist(destdirname,'dir') && arg(5) == 0
            fprintf('%s already exists!\n',destdirname)
            OverWriteFlag = input('Overwirte?(y/N)','s');
            if isempty(OverWriteFlag)
                OverWriteFlag = 'N';
            end
            if OverWriteFlag == 'N'
                continue
            end
        end
        if isunix
            cmd = ['cp -r ' dirpath ' ' destpath '/'];
            unix(cmd);
        elseif ispc
            cmd = ['xcopy ' dirpath ' ' destpath '\ /E'];
            dos(cmd);
        end
    end
end
fprintf('\n')
fprintf('*****************************************\n')
fprintf('* Preprocessing Machine Data Completed! *\n')
fprintf('*****************************************\n')