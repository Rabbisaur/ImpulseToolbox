function LogInfo = LoadLogNew(LogFilePath)
% Use: LogInfo = LoadLog(LogFilePath)
%
% LogInfo - a structure contains all the parameter values as well as their
% field names in a log file generated by VsgCtrl
% LogFilePath - full path to log file
%
% This function simply read .log file generated by VsgCtrl during data
% recording, and try to store values with fieldnames into a structure for
% convinient (hopefully future use)
%

% ------ Configure
TestNameDB = {'RFTune','chess','BarTexture','AttentiveCueing'}; % TestName database

%----------------------------------------------------------------------------------
idx = find(LogFilePath=='.',1,'last');
FilepathLength = numel(LogFilePath);
if isempty(idx) || FilepathLength - idx ~= 3
    % no file extension
    LogFilePath = [LogFilePath '.log'];
else
    LogFilePath = [LogFilePath(1:end-4) '.log'];
end
if exist(LogFilePath,'file')==2 % check file avaliability
    fprintf('\n\n\nLoadLogNew working on file:\n%s\n',LogFilePath);
    LogFileId = fopen(LogFilePath,'r');
    currline = 'dummy';
    numfield = 0;
    while ischar(currline)
        currline = fgetl(LogFileId);
        position = strfind(currline,'=');
        if ~isempty(position)
            tmp = textscan(currline,'%s','Delimiter','=');
            tmp = tmp{1};
            numfield = numfield + 1;
            if isempty(tmp)
                error('Empty Left Hand Side')
            else
                fieldnames{numfield} = tmp{1}(1:end-1);
                if numel(tmp) == 1
                    tmp{2} = 'N/A';
                end
            end
            fieldvalue{numfield} = tmp{2};
            
        else
            % currently do nothing
        end
    end
    % % %     NumFieldnames = numel(fieldnames);
    % % %     for i = 1:NumFieldnames
    % % %         % replace white spaces in fieldnames with '_'
    % % %         poz = fieldnames{i} == ' ';
    % % %         fieldnames{i}(poz) = '_';
    % % %         % replace reserved charactors with '_'
    % % %         poz = fieldnames{i} == '+';
    % % %         fieldnames{i}(poz) = '_';
    % % %         poz = fieldnames{i} == '-';
    % % %         fieldnames{i}(poz) = '_';
    % % %         poz = fieldnames{i} == '*';
    % % %         fieldnames{i}(poz) = '_';
    % % %         poz = fieldnames{i} == '/';
    % % %         fieldnames{i}(poz) = '_';
    % % %         poz = fieldnames{i} == '.';
    % % %         fieldnames{i}(poz) = '_';
    % % %         % eliminate '(' and ')'
    % % %         poz = fieldnames{i} == '(';
    % % %         fieldnames{i}(poz) = '';
    % % %         poz = fieldnames{i} == ')';
    % % %         fieldnames{i}(poz) = '';
    % % %         % if field name start with a number, add '_' in front of the name
    % % %         if ~isempty(str2num(fieldnames{i}(1)))
    % % %             fieldnames{i} = ['PRE_' fieldnames{i}];
    % % %         end
    % % %     end
    % % %     % check for field name duplication
    % % %     for i = 1:NumFieldnames
    % % %         NumDup = 0;
    % % %         for j = (i+1):NumFieldnames
    % % %             if strcmp(fieldnames{i},fieldnames{j})
    % % %                 NumDup = NumDup + 1;
    % % %                 fieldnames{j} = [fieldnames{j} '_' num2str(NumDup)];
    % % %             end
    % % %         end
    % % %     end
    % % %     LogInfo = cell2struct(fieldvalue,fieldnames,2);
    LogInfo.fieldnames = fieldnames;
    LogInfo.fieldvalue = fieldvalue;
    
    % ----- extract essential parameters ------
    % -- common fields
    % start time
    idx = strcmpi(LogInfo.fieldnames,'Start Time');
    if sum(idx) == 0
        error('Essential field: Start Time not found!')
    end
    idx = find(idx); idx = idx(1);
    val = LogInfo.fieldvalue{idx};
    LogInfoStc.StartTimeStrOri = val;
    val = textscan(val,'%s','Delimiter',',');
    val = val{1};
    TimeStr = [val{3}(end-1:end) ' ' val{3}(1:3) ' ' val{4} ' ' val{1}];
    LogInfoStc.StartTimeNum = datenum(TimeStr);
    LogInfoStc.StartTimeStr = TimeStr;
    % test name
    idx = strcmpi(LogInfo.fieldnames,'Test Name');
    if sum(idx) == 0
        error('Essential field: Test Name not found!')
    end
    idx = find(idx); idx = idx(1);
    val = LogInfo.fieldvalue{idx};
    LogInfoStc.TestName = val;
    idx = strcmpi(TestNameDB, LogInfoStc.TestName);
    
    if sum(idx) == 0 % is a unknown session
        fprintf('Warning! Session type unknown!\n')
        TestType = 0;
        TestTypeStr = 'Unknown';
    else
        TestType = find(idx);
        %         TestNameDB = {'RFTune','chess','BarTexture','AttentiveCueing'}; % TestName database
        val = find(idx);
        switch val
            case 1  % RFTuning
                idx = strcmpi(LogInfo.fieldnames, 'Test ID');
                if sum(idx) == 0
                    error('RFtuning session but has no Test ID!')
                end
                temp = LogInfo.fieldvalue{idx};
                temp = str2double(temp);
                if temp == 0 % orientation scan
                    TestType = 1.1;
                    TestTypeStr = 'OrientationScan';
                elseif temp == 1 || temp == 51 % X position scan
                    TestType = 1.2;
                    TestTypeStr = 'XpositionScan';
                elseif temp == 2 || temp == 52 % Y position scan
                    TestType = 1.3;
                    TestTypeStr = 'YpositionScan';
                else
                    TestType = 1.0;
                    TestTypeStr = 'UnknownScan';
                end
                
            case 2 % chess board
                TestTypeStr = 'ChessBoard';
            case 3 % Full Screen Contour
                TestTypeStr = 'FullScreenContour';
            case 4 % Attentive Cueing
                TestTypeStr = 'ClassicCueing';
        end
    end
    LogInfoStc.TestType = TestType;
    LogInfoStc.TestTypeStr = TestTypeStr;
    % NumOfBlocks
    idx = strcmpi(LogInfo.fieldnames,'NumOfBlocks');
    if sum(idx) == 0
    else
        idx = find(idx);
        idx = idx(1);
        val = LogInfo.fieldvalue{idx};
        LogInfoStc.NumBlocks = str2double(val);
    end
    % Practice
    idx = strcmpi(LogInfo.fieldnames,'Practice');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = LogInfo.fieldvalue{idx};
        LogInfoStc.NumPractice = str2double(val);
    end
    % StimOrder
    idx = strcmpi(LogInfo.fieldnames, 'StimOrder');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = LogInfo.fieldvalue{idx};
        LogInfoStc.StimOrder = str2double(val);
    end
    % CRT parameters
    idx = strcmpi(LogInfo.fieldnames, 'CrtDistance');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.Distance = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'CrtWidth');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.Width = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'CrtHeight');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.Height = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'CrtResH');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.ResolutionH = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'CrtResV');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.ResolutionV = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'FrameRate');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.FrameRate = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'FrameTime');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.FrameTime = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'MaxLum');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.MaxLum = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'MaxLumR');
    if sum(idx) == 0
    else
        idx = find(idx);idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.MaxLumRed = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'MaxLumG');
    if sum(idx) == 0
    else
        idx = find(idx);idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.MaxLumGreen = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'MaxLumB');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.CRTparam.MaxLumBlue = val;
    end
    
    % EyeSampFreq
    idx = strcmpi(LogInfo.fieldnames, 'EyeSampFreq');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.EyeSampFreq = val;
    end
    
    % RF params
    idx = strcmpi(LogInfo.fieldnames, 'Ori');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Ori = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'Sf');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Sf = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'Tf');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Tf = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'Ctr');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Ctr = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'Xp');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Xp = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'Yp');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Yp = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'Wid');
    if sum(idx) == 0
    else
        idx = find(idx);idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Wid = val;
    end
    idx = strcmpi(LogInfo.fieldnames,'Len');
    if sum(idx) == 0
    else
        idx = find(idx);idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Len = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'Aperture');
    if sum(idx) == 0
    else
        idx = find(idx);idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Len = val;
    end
    idx = strcmpi(LogInfo.fieldnames,'Wave');
    if sum(idx) == 0
    else
        idx = find(idx);idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Wave = val;
    end
    idx = strcmpi(LogInfo.fieldnames,'Color');
    if sum(idx) == 0
    else
        idx = find(idx);idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.Color = val;
    end
    idx = strcmpi(LogInfo.fieldnames,'FpShape');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.FpShape = val;
    end
    idx = strcmpi(LogInfo.fieldnames,'FpXp');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.FpXp = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'FpYp');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.FpYp = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'FpDia');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.FpDia = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'FpClrLum1');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.FpClrLum1 = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'FpClrLum2');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.FpClrLum2 = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'BkClrLum');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.RFsettings.BkClrLum = val;
    end
    % --- timing settings
    idx = strcmpi(LogInfo.fieldnames, 'PreFixTime');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.PreFixTime = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'PreFixTimeDelta');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.PreFixTimeDelta = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'PreFrame');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.PreFrame = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'PreFrameDelta');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.PreFrameDelta = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'SampleFrame');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.SampleFrame = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'SampleFrameDelta');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.SampleFrameDelta = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'DelayFrame');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.DelayFrame = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'DelayFrameDelta');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.DelayFrameDelta = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'OnFrame');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.OnFrame = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'OnFrameDelta');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.OnFrameDelta = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'OffFrame');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.OffFrame = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'OffFrameDelta');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.OffFrameDelta = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'MinStim');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.MinStim = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'MaxStim');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.MaxStim = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'RewardTime');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.RewardTime = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'RewardInc');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.RewardInc = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'RewardSteps');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.RewardSteps = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'BigReward');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.BigReward = val;
    end
    idx = strcmpi(LogInfo.fieldnames, '2AfcCount');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.r2AfcCount = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'DimTime');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.DimTime = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'RespBeginT');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.RespBeginT = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'ErrorNum');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.ErrorNum = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'ErrorTime');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.ErrorTime = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'ISI');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.ISI = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'ErrorPause');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.ErrorPause = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'SacTime');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.SacTime = val;
    end
    idx = strcmpi(LogInfo.fieldnames, 'SacHoldTime');
    if sum(idx) == 0
    else
        idx = find(idx); idx = idx(1);
        val = str2double(LogInfo.fieldvalue{idx});
        LogInfoStc.Timing.SacTime = val;
    end
    % finish time
    idx = strcmpi(LogInfo.fieldnames,'Finish Time');
    if sum(idx) == 0
        error('Essential field: Start Time not found!')
    end
    idx = find(idx); idx = idx(1);
    val = LogInfo.fieldvalue{idx};
    LogInfoStc.FinishTimeStrOri = val;
    val = textscan(val,'%s','Delimiter',',');
    val = val{1};
    TimeStr = [val{3}(end-1:end) ' ' val{3}(1:3) ' ' val{4} ' ' val{1}];
    LogInfoStc.FinishTimeNum = datenum(TimeStr);
    LogInfoStc.FinishTimeStr = TimeStr;
    % save LogInfo to mat
    [savepath, savedir] = GetSavePath(LogFilePath,'LogInfo.mat');
    if exist(savedir,'dir') == 7
    else
        mkdir(savedir)
    end
    save(savepath,'LogInfo','LogInfoStc')
    if ispc
        cmd = ['copy ' LogFilePath ' ' savedir];
        dos(cmd);
    else
        cmd = ['cp ' LogFilePath ' ' savedir];
        unix(cmd);
    end
    fclose(LogFileId);
else
    error('.log file not exist!')
end